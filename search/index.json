[{"content":"准备 🌟备份\n➡️账号： Settings \u0026ndash; Data import/export，全部导出\n以下文件夹用 FTP 客户端（FileZilla）备份到电脑\n➡️数据库：\nmkdir -p /pleromabackup chmod 777 /pleromabackup 登入数据库\nsu - postgres psql -U postgres postgres=# \\! pg_dump pleroma -f /pleromabackup/pleroma.pgdump ➡️Pleroma 配置：/etc/pleroma/\n➡️Pleroma 静态文件：/var/lib/pleroma\n🌟把域名的IP指向新服务器\n搭建过程 安装依赖\napt update apt upgrade apt install curl unzip libncurses5 postgresql postgresql-contrib nginx libmagic-dev apt install imagemagick ffmpeg libimage-exiftool-perl 安装本体：注意 Ubuntu22 的FLAVOUR变量是amd64-ubuntu-jammy\nadduser --system --shell /bin/false --home /opt/akkoma akkoma export FLAVOUR=\u0026#34;amd64-ubuntu-jammy\u0026#34; su akkoma -s $SHELL -lc \u0026#34; curl \u0026#39;https://akkoma-updates.s3-website.fr-par.scw.cloud/stable/akkoma-$FLAVOUR.zip\u0026#39; -o /tmp/akkoma.zip unzip /tmp/akkoma.zip -d /tmp/ \u0026#34; su akkoma -s $SHELL -lc \u0026#34; mv /tmp/release/* /opt/akkoma rmdir /tmp/release rm /tmp/akkoma.zip \u0026#34; mkdir -p /var/lib/akkoma/uploads chown -R akkoma /var/lib/akkoma mkdir -p /var/lib/akkoma/static chown -R akkoma /var/lib/akkoma mkdir -p /etc/akkoma chown -R akkoma /etc/akkoma su akkoma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl instance gen --output /etc/akkoma/config.exs --output-psql /tmp/setup_db.psql\u0026#34; su postgres -s $SHELL -lc \u0026#34;psql -f /tmp/setup_db.psql\u0026#34; su akkoma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl migrate\u0026#34; su akkoma -s $SHELL -lc \u0026#34;./bin/pleroma daemon\u0026#34; sleep 20 \u0026amp;\u0026amp; curl http://localhost:4000/api/v1/instance su akkoma -s $SHELL -lc \u0026#34;./bin/pleroma stop\u0026#34; 申请SSL证书：参考通配符 SSL 证书自动续期\rNginx：\ncp /opt/akkoma/installation/akkoma.nginx /etc/nginx/sites-available/akkoma.conf 修改所有 example.tld 为准备好的域名\nvim /etc/nginx/sites-available/akkoma.conf nginx -t systemctl restart nginx cp /opt/akkoma/installation/akkoma.service /etc/systemd/system/akkoma.service systemctl start akkoma systemctl enable akkoma 创建管理员账户、安装前端\ncd /opt/akkoma su akkoma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl user new admin cyouike@duck.com --admin\u0026#34; ./bin/pleroma_ctl frontend install pleroma-fe --ref stable ./bin/pleroma_ctl frontend install admin-fe --ref stable 本地定时备份 mkdir /opt/local_backup cd /opt/local_backup vim backup.sh 脚本内容：\n#!/bin/sh source /etc/profile echo \u0026#34;————————————backup to local directory——————————\u0026#34; | tee -a /opt/local_backup/backuplog.txt echo `date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` \u0026#34;now starting backup\u0026#34; | tee -a /opt/local_backup/backuplog.txt echo \u0026#39;stop akkoma\u0026#39; | tee -a /opt/local_backup/backuplog.txt sudo systemctl stop akkoma echo \u0026#34;0.create a backup day directory\u0026#34; | tee -a /opt/local_backup/backuplog.txt if [ -d /opt/local_backup/`date +%Y%m%d``date +%Y%m%d` ];then echo \u0026#34;Floder\u0026#34; `date +%Y%m%d` \u0026#34;already exists.\u0026#34; else mkdir /opt/local_backup/`date +%Y%m%d` echo \u0026#34;New floder\u0026#34; `date +%Y%m%d` | tee -a /opt/local_backup/backuplog.txt fi chmod +777 /opt/local_backup/`date +%Y%m%d` cd /opt/local_backup/`date +%Y%m%d` echo \u0026#34;1.dump database\u0026#34; | tee -a /opt/local_backup/backuplog.txt sudo -Hu postgres pg_dump -d akkoma --format=custom -f /opt/local_backup/`date +%Y%m%d`/akkoma.pgdump echo \u0026#34;2. copy upload \u0026amp; static folder\u0026#34; | tee -a /opt/local_backup/backuplog.txt cp -r /var/lib/akkoma/static /opt/local_backup/`date +%Y%m%d` cp -r /var/lib/akkoma/uploads /opt/local_backup/`date +%Y%m%d` echo \u0026#34;3. copy config file\u0026#34; | tee -a /opt/local_backup/backuplog.txt cp /etc/akkoma/config.exs /opt/local_backup/`date +%Y%m%d` echo \u0026#34;restart akkoma\u0026#34; | tee -a /opt/local_backup/backuplog.txt sudo systemctl start akkoma echo `date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` \u0026#34;finished\u0026#34; | tee -a /opt/local_backup/backuplog.txt echo \u0026#34;Backup for\u0026#34; `date +%Y%m%d` \u0026#34;done!\u0026#34; | tee -a /opt/local_backup/backuplog.txt 删除超过15天的备份\nvim clear.sh find /opt/local_backup/ -type d -mtime +15 -exec rm -rf {} \\; 设置定时任务\ncrontab -e 00 04 * * 6 root /bin/bash /opt/local_backup/backup.sh 00 23 1 * * root /bin/bash /opt/local_backup/clear.sh 参考 \u0026amp; 致谢 Installing on Linux using OTP releases\r备份pleroma记录\rManaging instance configuration\r","date":"2023-07-31T16:22:45+08:00","permalink":"https://falasool.github.io/2023/migrant-oto-akkoma/","title":"Migrant ot Akkoma"},{"content":"买服务器，系统为 Ubuntu 22.04 - x86_64\n买域名，托管到 CloudFlare（开DNS only），指向服务器IP\n插播：Flarum论坛也好看，还轻量\nChore SSH终端颜色\n# 进入 /etc/profile 文件 vim /etc/profile # 增加这一行 PS1=\u0026#39;[\\[\\e[32m\\]\\u\\[\\e[0m\\]\\[\\e[35m\\]@\\[\\e[0m\\]\\[\\e[33m\\]\\h\\[\\e[0m\\]\\[\\e[36m\\] \\W\\[\\e[0m\\]]\\$ \u0026#39; # 更新文件 source /etc/profile 安装常用工具\napt-get install curl wget screen tree git htop bash-completion fail2ban ufw -y 开放端口\nufw allow OpenSSH ufw enable ufw allow http ufw allow https ufw allow 80/tcp ufw allow 443/tcp ufw status 检查 80 端口有无被占用\nnetstat -tuln | grep 80# 返回为空说明没有 service nginx stop # nginx占了，停止nginx SMTP 配置\n刚开始用的 Mailjet，什么都配置好了，服务已经跑起来了，发不了邮件导致连管理员也注册不了 😅 原来是要发工单人工审核，还被拒了。转Mailgun\n[测试SMTP配置]\n./launcher enter app x86_64 arch detected. rake emails:test[your-email@gmail.com] 本体 Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh Discourse\ngit clone https://github.com/discourse/discourse_docker.git /var/discourse cd /var/discourse chmod 700 containers # 启动容器 ./discourse-setup #报错：输入 Hostname for your Discourse? [discourse.example.com]: 后：\nChecking your domain name . . . WARNING: Port 443 of computer does not appear to be accessible using hostname: xxx.com. WARNING: Connection to http://xxx.com (port 80) also fails. This suggests that xxx.com resolves to some IP address that does not reach this machine where you are installing discourse. The first thing to do is confirm that xxx.com resolves to the IP address of this server. You usually do this at the same place you purchased the domain. If you are sure that the IP address resolves correctly, it could be a firewall issue. A web search for \u0026#34;open ports YOUR CLOUD SERVICE\u0026#34; might help. This tool is designed only for the most standard installations. If you cannot resolve the issue above, you will need to edit containers/app.yml yourself and then type ./launcher rebuild app 解决：cloudflare里开启 DNS only\n成功启动容器后访问域名，注册管理员账户 🎉\n参考 \u0026amp; 致谢 让Discourse和其它网站跑在同一台主机上\r安装依赖：php_serialize、miro、mysql2\napt-get install build-essential ruby-dev libmysqlclient-dev apt-get install rubygems gem install php_serialize gem install miro gem install mysql2 ","date":"2023-07-22T21:28:27+08:00","permalink":"https://falasool.github.io/2023/build-discourse-site-on-ubuntu22/","title":"在 Ubuntu22.04 上搭建 Discourse 论坛"},{"content":"SSH 远程连接配置\n创建登录脚本 /.ssh/remote-login-vps.sh\n#!/usr/bin/expect set timeout 30 spawn ssh -p [lindex $argv 0] [lindex $argv 1]@[lindex $argv 2] expect { \u0026#34;(yes/no)?\u0026#34; {send \u0026#34;yes\\n\u0026#34;;exp_continue} \u0026#34;password:\u0026#34; {send \u0026#34;[lindex $argv 3]\\n\u0026#34;} } interact 授予执行权限 chmod +x remote-login-vps.sh\n进入iTerm2 -\u0026gt; preference -\u0026gt; Profiles，创建一个Profile，在 General - Command - Send text at start 输入~/.ssh/remote-login-vps.sh 22 用户 ip 密码\n","date":"2023-07-18T18:41:59+08:00","permalink":"https://falasool.github.io/2023/iterm2/","title":"iTerm2 配置"},{"content":"实现功能 展示任务的列表\n使用 v-for 在模板中循环渲染任务项组件，并根据任务的状态（完成或未完成）进行不同的展示样式 新增 todo\nv-model 实现输入框和数据的双向绑定 修改 todo\n删除 todo\n全选/取消全选\n统计任务\n隐藏已完成 todo\n本地储存\n进阶\n編輯 List 順序 將完成的項目移至Finish區域，並且將字體改成刪除線效果 增加 Icon 以及開場動畫 設定日期與時間推播 项目安装 用 npm 和 vite 新建项目\nnpm init vite-app ToDoList 进入项目、安装依赖、启动\ncd ToDoList npm install npm run dev 工程目录结构 . ├── index.html ├── node_modules # 项目依赖 ├── package-lock.json ├── package.json # 存放依赖包管理及命令管理信息文件 ├── public │ └── favicon.ico └── src # 存放vue文件 ├── App.vue # 项目的root组件，用来引入其它模块 ├── assets ├── components # 存放自定义的公共组件（=非路由组件） │ └── Helloworld.vue ├── index.css └── main.js # 入口文件，用于初始化vue实例 思路 先搭建好框架：写死数据看页面效果并调整\n然后把代码拆分进三个组件：Header、List、Footer（标题和任务输入框、任务列表项、按钮选择项和计数）\n写JS，并更换模板页面中的数据，用动态的数据代替。在setup()入口函数中写数据源和要实现功能的函数\n实现步骤 HTML 这不是最终结构，后面有修改\nCSS 安装和配置 TailwindCSS 在Vue的根目录下，安装 Tailwind 及其依赖项（PostCSS \u0026amp; auto-prefixer）\nnpm install -D tailwindcss postcss autoprefixer 生成配置文件并添加所有模板文件的路径\nnpx tailwindcss init -p //tailwind.config.js module.exports = { content: [ \u0026#34;./index.html\u0026#34;, \u0026#34;./src/**/*.{vue,js,ts,jsx,tsx}\u0026#34;, ], theme: { extend: {}, }, plugins: [], } 创建一个tailwind.css样式文件，用于初始化并引入tailwindcss的基础样式\n复制代码/* /src/tailwindcss.css*/ @tailwind base; @tailwind components; @tailwind utilities; 导入css/tailwindcss.css到main.js\n// src/main.js import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; + import \u0026#34;./tailwind.css\u0026#34; createApp(App).mount(\u0026#39;#app\u0026#39;) ","date":"2023-06-21T01:29:15+08:00","permalink":"https://falasool.github.io/2023/vue3-todolist/","title":"Vue3 | ToDoList"},{"content":"本来这期的标题我借用的是艾森手指上的纹身「杜绝爱与悲痛」，因为太过中二改掉啦！现在的题目是 Sailing 这首歌的歌词\n这周看了 SpringFFFire\r太太的《纯爱派》。主角之一艾森说这是他的葬礼选曲。我找来听了之后觉得很宽广和浪漫，听到这首歌的契机是有人期待它在自己的葬礼上响起，而且这个人好像真的命不久矣，所以又染上了悲伤的底色TT\n另一个主角安德烈说自己的葬礼要放 Welcome home\n如果以别的方式遇到这首歌我会觉得它有一种旅行啊度假啊之类的气质，很适合在旷野里一边开车一边听，或者大家围坐在石头上拍着腿合唱。但是因为安德烈，这首歌听起来好像跋涉了十二小时之后躺倒在安全、柔软的小屋里，眼皮垂下来，肌肉和关节都舒展开，有一种沉甸甸的分量。春火老师真会选曲，异乡人终于能在故乡安眠（还是和爱人一起），用 Welcome home 抚慰祝福他最好不过了\n爱情部分有种不顾读者死活的浪漫，感情浓度太高、经历如此传奇和波折，即使 happy ending 读者（我）也挠心挠肝失魂落魄。除此之外还想谈谈这本小说别的方面\n火星监狱篇 主旨可以说是「人生而自由」，还是儿童教育和女性失权现状的一面镜子\n「你见证了他们高谈梦想与壮志，似乎这些豪言壮语专为他们而造，你只能扮演他们志向远大的一个注脚，还往往显得愚蠢、成事不足败事有余。」\n「仿佛你的一生只有三种形态，处女、荡妇和母亲，一切都被这三类概括，除此之外的人格，统统被忽略。」\n「他们赢了满堂喝彩，输了也有失意的艺术，你们却不能碰『输赢』，似乎你们从未卷入竞争，不该大话输赢。可事实并非如此，人生来多多少少都要争抢，有人争得和平一些，有人争得凶一些，但你偏偏被划进『不准争抢』的类别。一旦你出来争名抢利，就立刻有谣言和诽谤如影随形，站不到公平的擂台。」\n「你天生好斗，现在有一个绝佳的擂台。」 艾森是在煽动芙里佳，但是我也抵挡不住这种诱惑\n度假篇 是 Erica 的视角，模仿阿吉列侬的日记这种方式实在太合适了😭。读第一遍的时候我就被震得要时不时停下来缓缓。孩子的爱、纯白的爱，非常天然，也非常沉重。我看有读者责备 Erica 索取得太多，太空想（包括后来的剧情），成年人也不是生来就明白界限在哪里的，他爱世界，也想要世界爱他，有什么不对。但是这个世界、怎么说，it sucks。\n倒是 ABO 世界，他劝安莉不要逃亡，发展到和原住民一起追捕安莉那里，我觉得有点疲惫，幻视那些对精神已经很紧张的受害者不阴不阳的男人：你太敏感了，不会吧？看似站在天平中间，实际上在拉偏架。我边看边想，要扭转他理中客立场的方法很简单：让他长个 pussy 出来，先趟趟路人、民兵、军人的雷，看看他们是不是真的「友好、尊重个人意愿、都可以商量」，哈哈\n还有这篇章的女 Alpha 的刻画让我有些震动（震动了好多次了！）想到三次元一些男人都消失社会就会成为全女乌托邦的观点，我不赞同这个观点，但是嘴笨。老师好厉害，用讲故事的方式很平实的反驳了，女人是一种处境，没有女人就会有男人承担女人的角色被压迫，性别为女的人在这个制度里得到迫害别人的权力之后也不会手软，依靠幻想中的女性天生的道德约束就……没有约束力\n这一篇里我最喜欢杰西，喜欢她们的逃亡之路，冲向悬崖就像塞尔玛和路易斯踩下油门飞向蓝天🥹\n午夜梦回，安德烈总是想起那条斜坡路，他觉得那条路生生地插在他的脑海里，塑造他的性格，因为他的心里逐渐依靠这条路形成一种理念，那就是，他是个独立的人。那种铺天盖地的孤独感并没有压倒他，反而让他生出一种自由感，没有谁对他来说是必要的，因为，看吧，就算一个人安德烈也可以走这条路，就算这样也可以活下去，这种来自内心的自豪感让安德烈觉得自己的生命也好、意志也好，都分外珍贵。唯有自身没有一技之长的挫败感挡住了他的自豪，因此他总是想多学点，不用太多，只要各样都学一点，将来总有用处，他无论如何要凭自己活下去，他觉得他在和命运战斗，他要躲开一切条条框框，走那条斜坡路，他觉得这有意义。\n","date":"2023-06-11T23:17:00+08:00","permalink":"https://falasool.github.io/book-review-chun-ai-pay/","title":"Book Review | I am sailing"},{"content":"Last week, I went to the theatre, i had a very good set, the play is very interesting. i did not enjoy it. the young man and a young woman is sitting behind me. They were talking loudly. i got very angry. i could not heat the actors. i turned around, i looked at the man and the woman angrily, they did not pay any attention, in the end, i could not bared, i turned around again,i can\u0026rsquo;t hear the word, i said angrily. Its not your business, the young man said rudely, this is a private conversation.\n","date":"2023-06-11T23:17:00+08:00","permalink":"https://falasool.github.io/2023/language-learning-dictate-nce-ii/","title":"Language learning | dictate NCE II"},{"content":" 前置步骤 安装依赖 # 更新 apt-get update # 安装依赖 apt install unzip libncurses5 postgresql postgresql-contrib nginx snapd libmagic-dev apt install imagemagick ffmpeg libimage-exiftool-perl PostgreSQL 性能调优 根据 pgTune 修改配置文件\nvim /etc/postgresql/13/main/postgresql.conf 重启 PostgreSQL\nsystemctl restart postgresql 安装 Pleroma 创建 Pleroma 用户 adduser --system --shell /bin/false --home /opt/pleroma pleroma 创建 pleroma 用户，指定家目录为 /opt/pleroma，用于配置 pleroma 的环境和文件，并禁止登录\n检测系统架构与 libc 版本，并根据结果设置环境变量 FLAVOUR arch=\u0026#34;$(uname -m)\u0026#34;;if [ \u0026#34;$arch\u0026#34; = \u0026#34;x86_64\u0026#34; ];then arch=\u0026#34;amd64\u0026#34;;elif [ \u0026#34;$arch\u0026#34; = \u0026#34;armv7l\u0026#34; ];then arch=\u0026#34;arm\u0026#34;;elif [ \u0026#34;$arch\u0026#34; = \u0026#34;aarch64\u0026#34; ];then arch=\u0026#34;arm64\u0026#34;;else echo \u0026#34;Unsupported arch: $arch\u0026#34;\u0026gt;\u0026amp;2;fi;if getconf GNU_LIBC_VERSION\u0026gt;/dev/null;then libc_postfix=\u0026#34;\u0026#34;;elif [ \u0026#34;$(ldd 2\u0026gt;\u0026amp;1|head -c 9)\u0026#34; = \u0026#34;musl libc\u0026#34; ];then libc_postfix=\u0026#34;-musl\u0026#34;;elif [ \u0026#34;$(find /lib/libc.musl*|wc -l)\u0026#34; ];then libc_postfix=\u0026#34;-musl\u0026#34;;else echo \u0026#34;Unsupported libc\u0026#34;\u0026gt;\u0026amp;2;fi;echo \u0026#34;$arch$libc_postfix\u0026#34; # 输出 amd64 所以设置环境变量为\nexport FLAVOUR=\u0026#34;amd64\u0026#34; 下载 pleroma 文件到 /tmp 目录并解压 su pleroma -s $SHELL -lc \u0026#34; curl \u0026#39;https://git.pleroma.social/api/v4/projects/2/jobs/artifacts/stable/download?job=$FLAVOUR\u0026#39; -o /tmp/pleroma.zip unzip /tmp/pleroma.zip -d /tmp/ \u0026#34; 移动文件到 /opt/pleroma 并删除 /tmp su pleroma -s $SHELL -lc \u0026#34; mv /tmp/release/* /opt/pleroma rmdir /tmp/release rm /tmp/pleroma.zip \u0026#34; 创建各种目录及赋权操作 uploads 目录并赋权 # uploads 目录 \u0026amp; 赋权 mkdir -p /var/lib/pleroma/uploads chown -R pleroma /var/lib/pleroma # static 目录 \u0026amp; 设置所有者为 pleroma mkdir -p /var/lib/pleroma/static chown -R pleroma /var/lib/pleroma # 配置文件目录 \u0026amp; 设置所有者为 pleroma mkdir -p /etc/pleroma chown -R pleroma /etc/pleroma 生成配置文件 su pleroma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl instance gen --output /etc/pleroma/config.exs --output-psql /tmp/setup_db.psql\u0026#34; 回答若干问题\n创建 postgres 数据库 su postgres -s $SHELL -lc \u0026#34;psql -f /tmp/setup_db.psql\u0026#34; 更新数据库 schema su pleroma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl migrate\u0026#34; 启动实例 su pleroma -s $SHELL -lc \u0026#34;./bin/pleroma daemon\u0026#34; 等待一会检测实例运行情况 curl http://localhost:4000/api/v1/instance 暂停实例运行 su pleroma -s $SHELL -lc \u0026#34;./bin/pleroma stop\u0026#34; 通配符 SSL 证书自动续期 如果预装了certbot要先删掉 apt-get remove certbot\n安装 certbot\nsnap install core snap refresh core snap install --classic certbot ln -s /snap/bin/certbot /usr/bin/certbot snap set certbot trust-plugin-with-root=ok snap install certbot-dns-cloudflare 放置凭据\nToken 在 https://dash.cloudflare.com/profile/api-tokens\r生成\nsudo mkdir -p /root/.secrets/ sudo touch /root/.secrets/cloudflare.ini # 添加/.secrets目录与cloudflare.ini文件 sudo chmod 0700 /root/.secrets/ sudo chmod 0400 /root/.secrets/cloudflare.ini # 指定权限 vim /root/.secrets/cloudflare.ini # Cloudflare API token used by Certbot dns_cloudflare_api_token = 0123456789abcdef0123456789abcdef01234567 申请证书\ncertbot certonly \\ --dns-cloudflare \\ --dns-cloudflare-credentials ~/.secrets/cloudflare.ini \\ -d example.com -d *.example.com 测试自动延期\ncertbot renew --dry-run Nginx 复制 Pleroma 的 nginx 配置到 nginx 目录\ncp /opt/pleroma/installation/pleroma.nginx /etc/nginx/sites-available/pleroma.conf ln -s /etc/nginx/sites-available/pleroma.conf /etc/nginx/sites-enabled/pleroma.conf 编辑 Pleroma 的 nginx 配置文件，改成自己的域名\nvim /etc/nginx/sites-available/pleroma.conf 这里改成\nlocation / { return 301 https://\u0026lt;domain\u0026gt;$request_uri; } 重启 nginx\nnginx -t systemctl start nginx # or nginx -s reload 设置系统服务 cp /opt/pleroma/installation/pleroma.service /etc/systemd/system/pleroma.service systemctl start pleroma systemctl enable pleroma 可以访问啦\n创建管理员账户 cd /opt/pleroma/bin su pleroma -s $SHELL -lc \u0026#34;./bin/pleroma_ctl user new \u0026lt;joeuser\u0026gt; \u0026lt;joeuser@sld.tld\u0026gt; --admin\u0026#34; 参考 \u0026amp; 致谢 在 Debian 10 / Ubuntu 20.04 上安装 Pleroma 通配符域名证书申请与自动续费（Nginx，Debian 10）\rConfiguration Cheat Sheet\r","date":"2023-06-03T01:29:15+08:00","permalink":"https://falasool.github.io/2023/new-pleroma-isntance-on-debian11/","title":"Pleroma | 在 Debian 上搭建 pleroma 实例"},{"content":" 购买服务器 选 intel - 美西机房 - Debian11 - 1C1G 25G SSD 1TB\n添加 SSH，生成密钥\nssh-keygen -t rsa -b 4096 -C \u0026#34;example comment\u0026#34; 打印出公钥内容，粘贴进 VPS 服务商的界面去\ncat /Users/userName/.ssh/id_rsa.pub 用 SSH 终端远程登录，测试 IP 中国大陆是否可用\nhttp://ping.pe/\rhttps://ping.chinaz.com/\r修改服务器时区 查看当前时区\nadmin@xxx:~# date Fri 02 Jun 2023 01:25:08 PM UTC 修改时区，然后再次检查当前时区\n# 删除默认时区 admin@xxx:~# rm -rf /etc/localtime # 修改为上海 admin@xxx:~# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 检查 admin@xxx:~# date Fri 02 Jun 2023 01:27:14 PM CST 安装常用工具 apt update \u0026amp;\u0026amp; apt install curl wget screen tree git htop bash-completion fail2ban vim -y curl：请求 web 服务器\nwget：下载软件包\nscreen：终端管理工具，随手 screen -S name\ntree：显示目录结构\nhtop：监控进程\nbash-completion：命令自动补全工具，按 [Tab][Tab]\n# 定位 bash-completion 配置文件 find / -name \u0026#34;bash_completion.d\u0026#34; /etc/bash_completion.d # 添加 docker 的自动补全，重启 bash cd /etc/bash_completion.d curl -L -O https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose fail2ban：防止暴力破解攻击，在 /etc/fail2ban/jail.conf 修改配置，然后激活 # 检验有没有正确启动 fail2ban-client ping # 查看目前启用的规则 fail2ban-client status # 查看某个规则下被封禁的次数、ip fail2ban-client status sshd 更改终端颜色 进入 /etc/profile 文件，vim /etc/profile，修改命令行提示符的颜色设置\nPS1=\u0026#39;[\\[\\e[32m\\]\\u\\[\\e[0m\\]\\[\\e[35m\\]@\\[\\e[0m\\]\\[\\e[33m\\]\\h\\[\\e[0m\\]\\[\\e[36m\\] \\W\\[\\e[0m\\]]\\$ \u0026#39; # 更新文件 source /etc/profile 解释：PS1变量代表\u0026lt;用户名+主机名+路径名（长路径）+ $\u0026gt;\n添加 SWAP 确认是否已存在 SWAP\nfree -m 有 Swap 项而且 total 列不为零，说明 Swap 已存在，可以自行修改分区容量，参考：为 Linux 添加 swap 分区或修改 swap 分区容量\r防火墙 ufw allow OpenSSH ufw enable ufw allow http ufw allow https ufw allow 80/tcp ufw allow 443/tcp ufw status # or ufw default deny incoming ufw default allow outgoing ufw allow ssh ufw allow http ufw allow https ufw enable ufw status numbered ufw reload 参考 \u0026amp; 致谢 购买 VPS 之后需要做的事情\rVPS 性能测试\r如何利用Docker搭建Mastodon实例（一）：基础搭建篇\r","date":"2023-06-01T23:29:38+08:00","permalink":"https://falasool.github.io/2023/buy-and-set-ups/","title":"Pleroma | 购买服务器及之后要做什么"},{"content":"支持 mermaid，新增导航栏，添加一些小功能，微调样式\n修改标题样式 H2 和 H3 区分度不大\n遂改\n# /assets/scss/partials/layout/article.scss .article-content { h1, h2, h3, h4, h5, h6 { margin-inline-start: calc((var(--card-padding)) * -1); padding-inline-start: calc( var(--card-padding) - var(--heading-border-size) ); } h1, h2 { border-inline-start: var(--heading-border-size) solid var(--accent-color); } h3, h4, h5, h6 { border-inline-start: var(--heading-border-size) solid #f5f5fa; } } 调整友情链接页面布局 ///assets/scss/custom.scss //友情链接双栏 + @media (min-width: 1024px) { + .article-list--compact.links { + display: grid; + grid-template-columns: 1fr 1fr; + background: none; + box-shadow: none; + + article { + background: var(--card-background); + border: none; + box-shadow: var(--shadow-l2); + margin-bottom: 8px; + border-radius: 10px; + \u0026amp;:nth-child(odd) { + margin-right: 8px; + } + } + } +} 代码来自 Hugo | 第三篇 Stack 主题装修记录，堂堂再临！\r外部链接的样式 # layouts/_default/_markup/render-link.html {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} \u0026lt;span style=\u0026#34;white-space: nowrap;\u0026#34;\u0026gt;\u0026lt;svg width=\u0026#34;.7em\u0026#34; height=\u0026#34;.7em\u0026#34; viewBox=\u0026#34;0 0 21 21\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;/svg\u0026gt;\u0026lt;/span\u0026gt; {{ end }} 在移动端显示 TOC 抄了代码 Feature/add inline toc #615\r导航栏 隐藏某个选项 隐藏了 Home，和点击 avatar 的效果重复了\n.menu { li:first-child { display: none; } } 新增 menu 选项 在 /content/page 目录下新建 dairy 文件夹，把 .md 放进来（这些文章不会在 homepage 显示）创建 index.md，在 Tabler Icons\r下载 icon 并替换，修改对应的 layout\n# layouts/_defualt/list.html - \u0026lt;div class=\u0026#34;section-card\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt; + \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $paginator.Pages }} + {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; 效果：\n修改背景色 在 Open Color\r选个喜欢的颜色\n# assets\\scss\\variables.scss --body-background: #f5f5f5; 禁止部分页面显示 ReadingTime 比如 /friends ，不是文章，不需要显示阅读时间\n# /blog/layouts/partials/article/components/details.html + {{ if and (not .Date.IsZero) (.Site.Params.article.readingTime) }} 暂时禁用翻译按钮 如果有对应的页面，比如 /page/about 下有：\n. ├── index.md └── index.zh-cn.md 就会显示翻译按钮，暂时用不到的话在 md 文件里写 draft: true即可\n添加 mermaid 支持 按照 官方文档\r新建文件 layouts/_default/_markup/render-codeblock-mermaid.html\n\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt;{{- .Inner | safeHTML }}\u0026lt;/div\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 在 layouts/partials/article/components/content.html 添加：\n{{ .Content | replaceRE \u0026#34;(\u0026lt;table\u0026gt;(?:.|\\n)+?\u0026lt;/table\u0026gt;)\u0026#34; $wrappedTable | safeHTML }} {{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} 演示效果：时序图/饼图/甘特图/Git 图，更多请看 官方文档\rsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! pie title Pets adopted by volunteers \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit MarkDown 块 固定块的高度 过长的内容影响观感，所以把 block 的高度限制在 20em，并隐藏滚动条\n# partials/layout/article.scss .article-content { .highlight { - padding: var(--card-padding); pre { margin: initial; + padding: var(--card-padding); margin: 0; width: auto; + max-height: 20em; + scrollbar-width: none; /* Firefox */ + \u0026amp;::-webkit-scrollbar { + display: none; /* Chrome Safari */ + } } } } 代码块 macOS 样式 # custom.scss .highlight::before { content: \u0026#39;\u0026#39;; display: block; background: url(/code-header.svg); height: 30px; width: 100%; background-size: 45px; background-repeat: no-repeat; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px; position: absolute; top: 0; left: 0; } 修改字体 对样式不满意、就从控制台找到对应的类名，在 custom.scss 里修改就好了\n修改正文字体 参照：Example: Custom font family for article content\r# layouts/partials/head/custom.html \u0026lt;style\u0026gt; /* Overwrite CSS variable */ :root { --article-font-family: \u0026#39;Noto Serif HK\u0026#39;, var(--base-font-family); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; ;(function () { const customFont = document.createElement(\u0026#39;link\u0026#39;) customFont.href = \u0026#39;https://fonts.googleapis.com/css2?family=Noto+Serif+HK:wght@300;400;500;600;700\u0026amp;display=swap\u0026#39; customFont.type = \u0026#39;text/css\u0026#39; customFont.rel = \u0026#39;stylesheet\u0026#39; document.head.appendChild(customFont) })() \u0026lt;/script\u0026gt; 修改全站字体 :root { --sys-font-family: \u0026#39;Noto Serif HK\u0026#39;, -apple-system, BlinkMacSystemFont, \u0026#39;Segoe UI\u0026#39;, \u0026#39;Droid Sans\u0026#39;, \u0026#39;Helvetica Neue\u0026#39;; --zh-font-family: \u0026#39;Noto Serif HK\u0026#39;, \u0026#39;Hiragino Sans GB\u0026#39;, \u0026#39;Droid Sans Fallback\u0026#39;, \u0026#39;Microsoft YaHei\u0026#39;; --base-font-family: \u0026#39;Noto Serif HK\u0026#39;, var(--sys-font-family); } 返回顶部按钮 # /layouts/partials/footer/custom.html \u0026lt;!--返回顶部按钮 --\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;back-to-top\u0026#34; title=\u0026#34;返回顶部\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!--返回顶部CSS --\u0026gt; \u0026lt;style\u0026gt; #back-to-top { display: none; position: fixed; bottom: 20px; right: 55px; width: 55px; height: 55px; border-radius: 7px; background-color: rgba(64, 158, 255, 0.5); box-shadow: var(--shadow-l2); font-size: 30px; text-align: center; line-height: 50px; cursor: pointer; } #back-to-top:before { content: \u0026#39; \u0026#39;; display: inline-block; position: relative; top: 0; transform: rotate(135deg); height: 10px; width: 10px; border-width: 0 0 2px 2px; border-color: var(--back-to-top-color); border-style: solid; } #back-to-top:hover:before { border-color: #2674e0; } /* 在屏幕宽度小于 768 像素时，钮位置调整 */ @media screen and (max-width: 768px) { #back-to-top { bottom: 20px; right: 20px; width: 40px; height: 40px; font-size: 10px; } } /* 在屏幕宽度大于等于 1024 像素时，按钮位置调整 */ @media screen and (min-width: 1024px) { #back-to-top { bottom: 20px; right: 40px; } } /* 在屏幕宽度大于等于 1280 像素时，按钮位置调整 */ @media screen and (min-width: 1280px) { #back-to-top { bottom: 20px; right: 55px; } } /* 目录显示时，隐藏按钮 */ @media screen and (min-width: 1536px) { #back-to-top { visibility: hidden; } } \u0026lt;/style\u0026gt; \u0026lt;!--返回顶部JS --\u0026gt; \u0026lt;script\u0026gt; function backToTop() { document.documentElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39;, }) } window.onload = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026gt; 0) { totopBtn.style.display = \u0026#39;inline\u0026#39; } else { totopBtn.style.display = \u0026#39;none\u0026#39; } } window.onscroll = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026lt; 200) { totopBtn.style.display = \u0026#39;none\u0026#39; } else { totopBtn.style.display = \u0026#39;inline\u0026#39; totopBtn.addEventListener(\u0026#39;click\u0026#39;, backToTop, false) } } \u0026lt;/script\u0026gt; ShortCodes 折叠内容 通过 details 标签实现：\n# layouts/shortcodes/detail.html \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{{ (.Get 0) }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt; 使用：\n{{/*\u0026lt; detail \u0026#34;生效了\u0026#34; \u0026gt;*/}} (〃`𓎟´〃) 天才ですから！ {{/*\u0026lt;/detail\u0026gt;*/}} 生效了 (〃`𓎟´〃) 天才ですから！ Spotify // layouts/shortcodes/spotify.html \u0026lt;!-- Parameters: type - (Required) album / track / playlist / artist id - (Required) Target ID width - (Optional) width height - (Optional) height --\u0026gt; {{ if .IsNamedParams }} \u0026lt;iframe src=\u0026#34;https://open.spotify.com/embed/{{ .Get \u0026#34;type\u0026#34; }}/{{ .Get \u0026#34;id\u0026#34; }}\u0026#34; width=\u0026#34;{{ default \u0026#34;100%\u0026#34; (.Get \u0026#34;width\u0026#34;) }}\u0026#34; height=\u0026#34;{{ default \u0026#34;380\u0026#34; (.Get \u0026#34;height\u0026#34;) }}\u0026#34; frameborder=\u0026#34;0\u0026#34; allowtransparency=\u0026#34;true\u0026#34; allow=\u0026#34;encrypted-media\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {{ else }} \u0026lt;iframe src=\u0026#34;https://open.spotify.com/embed/{{ .Get 0 }}/{{ .Get 1 }}\u0026#34; width=\u0026#34;{{ default \u0026#34;100%\u0026#34; (.Get 2) }}\u0026#34; height=\u0026#34;{{ default \u0026#34;380\u0026#34; (.Get 3) }}\u0026#34; frameborder=\u0026#34;0\u0026#34; allowtransparency=\u0026#34;true\u0026#34; allow=\u0026#34;encrypted-media\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {{ end }} 使用：\n{{/*\u0026lt; spotify type=\u0026#34;track\u0026#34; id=\u0026#34;2D3gvohUyOfXIVX6Mvhqae\u0026#34; height=\u0026#34;80px\u0026#34;\u0026gt;*/}} 添加 apple-touch-icon # /layouts/_default/baseof.html \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/xxxxxxxx\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; 添加背景的蛛网特效 在 /layouts/_default/baseof.html 引入 \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;https://demo.hellozwh.com/source/canvas-nest.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 或\n!(function () { function o(w, v, i) { return w.getAttribute(v) || i } function j(i) { return document.getElementsByTagName(i) } function l() { var i = j(\u0026#39;script\u0026#39;), w = i.length, v = i[w - 1] return { l: w, z: o(v, \u0026#39;zIndex\u0026#39;, -1), o: o(v, \u0026#39;opacity\u0026#39;, 0.5), c: o(v, \u0026#39;color\u0026#39;, \u0026#39;0,0,0\u0026#39;), n: o(v, \u0026#39;count\u0026#39;, 99), } } function k() { ;(r = u.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth), (n = u.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight) } function b() { e.clearRect(0, 0, r, n) var w = [f].concat(t) var x, v, A, B, z, y t.forEach(function (i) { ;(i.x += i.xa), (i.y += i.ya), (i.xa *= i.x \u0026gt; r || i.x \u0026lt; 0 ? -1 : 1), (i.ya *= i.y \u0026gt; n || i.y \u0026lt; 0 ? -1 : 1), e.fillRect(i.x - 0.5, i.y - 0.5, 1, 1) for (v = 0; v \u0026lt; w.length; v++) { x = w[v] if (i !== x \u0026amp;\u0026amp; null !== x.x \u0026amp;\u0026amp; null !== x.y) { ;(B = i.x - x.x), (z = i.y - x.y), (y = B * B + z * z) y \u0026lt; x.max \u0026amp;\u0026amp; (x === f \u0026amp;\u0026amp; y \u0026gt;= x.max / 2 \u0026amp;\u0026amp; ((i.x -= 0.03 * B), (i.y -= 0.03 * z)), (A = (x.max - y) / x.max), e.beginPath(), (e.lineWidth = A / 2), (e.strokeStyle = \u0026#39;rgba(\u0026#39; + s.c + \u0026#39;,\u0026#39; + (A + 0.2) + \u0026#39;)\u0026#39;), e.moveTo(i.x, i.y), e.lineTo(x.x, x.y), e.stroke()) } } w.splice(w.indexOf(i), 1) }), m(b) } var u = document.createElement(\u0026#39;canvas\u0026#39;), s = l(), c = \u0026#39;c_n\u0026#39; + s.l, e = u.getContext(\u0026#39;2d\u0026#39;), r, n, m = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (i) { window.setTimeout(i, 1000 / 45) }, a = Math.random, f = { x: null, y: null, max: 20000 } u.id = c u.style.cssText = \u0026#39;position:fixed;top:0;left:0;z-index:\u0026#39; + s.z + \u0026#39;;opacity:\u0026#39; + s.o j(\u0026#39;body\u0026#39;)[0].appendChild(u) k(), (window.onresize = k) ;(window.onmousemove = function (i) { ;(i = i || window.event), (f.x = i.clientX), (f.y = i.clientY) }), (window.onmouseout = function () { ;(f.x = null), (f.y = null) }) for (var t = [], p = 0; s.n \u0026gt; p; p++) { var h = a() * r, g = a() * n, q = 2 * a() - 1, d = 2 * a() - 1 t.push({ x: h, y: g, xa: q, ya: d, max: 6000 }) } setTimeout(function () { b() }, 100) })() 有兴趣了做做 博客时间轴 导航页 参考 \u0026amp; 致谢 Hugo | 看中 Stack 主题的归档功能，搬家并做修改\rHugo Stack 主题折腾笔记\r拥抱最好用的 hugo 之 stack\r『Hugo』Hugo Styles\r来写一些好玩的 Hugo 短代码吧\rHugo Stack 主题装修笔记\rHugo 博客自定义优化\r","date":"2023-05-11T21:28:27+08:00","permalink":"https://falasool.github.io/2023/custom-hugo-theme-stack/","title":"Hugo｜自定义 hugo-theme-Stack"},{"content":"Nginx 几个重要的Nginx文件和目录 网站内容 /var/www/html：默认的网站内容存放目录，Nginx 默认的欢迎界面就存放在这。可以通过修改Nginx配置文件更改。 服务器配置 /etc/nginx/nginx.conf：Nginx配置文件，修改它配置Nginx全局设置。 /etc/nginx/sites-available/：可用站点配置文件放置目录，可在此创建多个虚拟主机，每一个站点一个配置文件 /etc/nginx/sites-enabled/：已启用站点的软链接目录，Nginx默认站点目录，nginc.conf 默认包含的文件夹。在此文件夹建立的站点，需要建立软连接到目录/etc/nginx/sites-available/里 /etc/nginx/conf.d：用于存放引入的其他配置文件的目录（存放公共配置片段） /etc/nginx/mime.types: 设置媒体类型映射关系 /etc/nginx/fastcgi_params: 一些默认的参数文件 /etc/nginx/modules-available/enabled: Nginx 模块目录 /etc/nginx/snippets: 代码片段目录 /etc/nginx/ko-utf、/etc/nginx/win-utf 等:一些编码转换映射文件 服务日志 /var/log/nginx/access.log：如无其他设置，此文件记录了每一次的网页服务请求。 /var/log/nginx/error.log：Nginx错误请求记录文件。 ","date":"2023-04-11T21:28:27+08:00","permalink":"https://falasool.github.io/2023/nginx-memos/","title":"Nginx"},{"content":"本次搭建使用 Ubuntu 22.10 系统\n购买 VPS ⚠️不要买机房在大陆的服务商 VPS ⚠️\n在备案通过之前 80 和 443 端口是封禁的 -\u0026gt; 无法申请 SSL 证书 -\u0026gt; Misskey 需要 SSL 才能访问，GG\n（即使没有这个问题，买大陆节点的服务建站也是一种自杀行为）\n注册 注册Vultr 账号，充值\n创建 VPS 选 Cloud Compute\nCPU 选 AMD 和 Intel 都行\n机房位置选择日本、新加坡、美西都行，一般不推荐欧洲（对于中国国内）\n选择操作系统：Ubuntu 22.10 x64\n选择 Size：$5 的 1C1G1TB 套餐（记得勾选 No Thanks）\n关闭自动备份，省 $1\nAdditional Features：勾选 Enable IPv6\n添加 SSH Keys\n打开命令行，输入\nssh-keygen -t rsa -b 4096 -C \u0026#34;Example comment\u0026#34; 在这行提示后面输入你想要保存密钥的路径\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/example_user/.ssh/id_rsa): 我输入（uu是我的电脑用户名）\n/home/uu/.ssh/id_rsa_vultr 所以在 /.ssh 目录下可以找到 id_rsa_vultr 和 id_rsa_vultr.pub 文件，它们分别是私钥和公钥\n接下来要把公钥内容添加到 vultr 去\n# 进入.ssh 目录 cd .ssh # 打印文件内容 cat id_rsa_vultr.pub 这时底部付款栏应该显示 $5.00/month ，点击 Deploy Now 确认创建服务器，等待一会，等 Status 变成 Running 就好了 点击刚刚创建的 VPS，看到如下界面。\n左下角的 IP Address、Username、Password 是待会连接服务器的时候，要用到的 SSH 连接信息\n登录 VNC：查看控制台 关机：就和关电脑一样（关机的时候仍然在计费哦！） 重启：就和重启电脑一样 重装系统：把服务器重置成刚创建时的状态 销毁/删除：销毁了服务器就不计费了，数据丢失，无法找回 Snapshots：快照，指将当前 VPS 的状态保存下来，对 VPS 进行完整备份\n服务器创建完成\n检查 IP Ping 一下 IP\n用检查工具比如 https://ip112.cn/\r检查 IP，此 IP 可用\n其它测试工具\nhttp://ping.pe/\r— 全球节点 Ping，包括中国的三大运营商 http://ping.chinaz.com/\r— Ping 检测中国大陆的访问情况 域名 在域名商 Dynadot\r注册账号，买一个域名\n解析域名 依次点击\n暂停⏸️\n去 CloudFlare\r注册登录账号，依次操作：\n添加新站点\n输入你的域名\n选择免费方案\n添加 DNS 解析记录\n* 是通配符，意思是我的二级域名，xxx.ponderduck.cc 的 DNS 解析也一起被接管了。不用我一个一个设置\n第二行是域名本体\nwww 让输入 www.ponderduck.cc\r也能访问\n复制 CloudFlare 提供的两个名称服务器，填进 Dynadot 的 DNS 设置，保存\n回到 CloudFlare 点击 Done, check nameservers，等一会\n测试，ping 你的域名，返回服务器 IP 说明解析生效\n开启完全 SSL，否则访问站点会报「重定向次数过多」的错误\n✅域名解析完成\n服务器基础配置 对哪一步不自信，可以在开始做之前先去服务器管理面板创建一个快照（snapshots），快照就是存档点\n远程连接 ssh root@101.113.22.42 # 换成你的ip地址，回车 然后把密码从 vultr 复制过来回车，会看到类似这样的提示就表示连接服务器成功\nWelcome to Ubuntu 22.10 (GNU/Linux 5.19.0-23-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage ...省略一部分内容... root@vultr:~# 安全设置 因为 root 权限太太太强大，为了避免婴儿（我）拿核武器发射按钮的情况出现，创建一个普通用户日常使用\n新建普通用户并设定密码 adduser vpsadmin # vpsadmin是用户名 然后输入密码 - 确认密码（太简单会被拒绝==）\n赋予 「vpsadmin」 使用 sudo 指令的权限 什么是 su 和 sudo 请看：Linux 的 su 與 sudo 指令教學與範例\rsudo adduser vpsadmin sudo 另外开一个终端窗口，登录 vpsadmin 账号\nssh vpsadmin@185.202.62.49 # 换成你的IP，回车，然后输入密码 验证是否获得 sudo 权限\nsudo ls -al /root 返回类似内容（展示 /root 目录下的资料）就表示成功了\n[可选]SSH免密登录 每次登录 vpsadmin 都要手动输密码很麻烦，设置一下免密登录\n在 Tabby 设置 - Profiles \u0026amp; connections - + New profile - SSH connection\n禁止 root 登录 （禁用核按钮）\n登录 root 账户，输入\nnano /etc/ssh/sshd_config 使用 control + W 进入搜索模式，输入 PerimitRootLogin 并回车，找到所在行，改成（记得要取掉注释 #！！）\nPermitRootLogin: no *prohibit-password/without-password 意为禁止密码登录\n使用 control + O，保存更改，control + X 退出\n重新启动 SSH 服务\nsudo /etc/init.d/ssh restart 打开一个新窗口，尝试用 root 登录，返回 Permission denied\u0026hellip;\n✅成功禁止 root 登录\n从现在开始，用「vpsadmin」这个账户远程连接 VPS 吧\n搭建环境 修改服务器时间 查看时间\ntimedatectl 列出所有时区\ntimedatectl list-timezones 改成香港🇭🇰\nsudo timedatectl set-timezone Asia/Hong_Kong 安装常用命令 sudo apt-get install curl wget screen tree -y *curl用于请求 Web 服务器\n*wget用来下载软件包\n*screen用于命令行终端的窗口切换\n*tree用于显示当前文件夹的目录结构\n（如果你有其它要用的也一起加进来，或者要用了再用这个命令单独安装也可以）\n添加 SWAP swap 是 Linux 中的虚拟内存，用于在物理内存不足的情况下储存临时数据，可以提升小内存 VPS 的运行效率\n确认是否已存在 SWAP\nfree -m 有 Swap 项而且 total 列不为零，说明 Swap 已存在，可以自行修改分区容量，参考：为 Linux 添加 swap 分区或修改 swap 分区容量\r配置防火墙 sudo ufw allow OpenSSH sudo ufw enable 打开防火墙\nsudo ufw allow http sudo ufw allow https 打开 80、443 的端口\nsudo ufw allow 80/tcp sudo ufw allow 443/tcp （其它服务需要的端口也用 sudo ufw allow xx/tcp 开启）\n验证防火墙是否打开，端口是否开启\nsudo ufw status 和其它服务商不同，Vultr 没有默认防火墙设置，所以要自己开启\n在 Vultr 添加防火墙规则\n安装 Docker 和 Docker Compose *Compose 是 Docker 的一个命令行工具，通过 yml 文件定义、创建、管理多容器的 Docker 应用\n跟着 如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose\r丝滑完成安装\n推荐：Docker Commands Tutorial | Getting Started With Docker In Linux\r修改 Docker 配置 Docker 的配置文件路径是 /etc/docker/daemon.json，需要手动创建：\n进入 /etc/docker 目录\ncd /etc/docker 用 vim 编辑 daemon.json 文件\nsudo vim daemon.json 进入 vim 后输入如下内容，这段代码会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，限制日志文件的大小（20M），限制日志文件数量，防止 Docker 日志过多占用硬盘\n（代码来自烧饼博客\r）\n{ \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;20m\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;ipv6\u0026#34;: true, \u0026#34;fixed-cidr-v6\u0026#34;: \u0026#34;fd00:dead:beef:c0::/80\u0026#34;, \u0026#34;experimental\u0026#34;:true, \u0026#34;ip6tables\u0026#34;:true } ⚠️ vim 和普通键入略有不用\n首先 I 进入编辑模式，输入内容（注意格式：大括号 {} 里的内容除了最后一行，都必须用英文逗号 , 结尾）\n完成输入后，按 esc 回到一般模式\n输入 :wq ，回车（意为保存-离开）\n不放心可以再次进入 daemon.json 检查是否成功写入，效果类似：\n了解：Linux vi/vim 是什么，怎么使用\r重启 Docker 服务\nsudo systemctl daemon-reload sudo systemctl restart docker 检查 Docker 是否正在运行 sudo systemctl status docker 换个方式，再测试一下\nsudo docker run hello-world 终于成功了 😭\nMisskey 创建安装目录 之前给 Docker 的数据和配置文件新建一个目录 docker_data，这个文件夹就是包住整个 Misskey 的盒子\nsudo mkdir -p data/docker_data 进入目录\ncd data/docker_data 创建 misskey 文件夹\nsudo mkdir misskey 配置安装文件 进入 misskey 文件夹\ncd misskey 创建并编辑 yml 文件，让它去部署\nsudo vim docker-compose.yml 按 I，切换到编辑模式，把以下内容粘贴进去\n# Misskey minimal deploy config version: \u0026#34;3\u0026#34; services: web: restart: unless-stopped # always意味着自动重启，请注意如果您对您的配置没有信心，请不要开启这个选项，以避免进程崩溃反复重启耗费大量资源！ image: misskey/misskey:latest # 这里使用了官方镜像，以避免本地构建时资源不足的问题 container_name: misskey_web # 容器名，方便管理，您可以自行修改为您觉得合适的内容 links: - db - redis ports: - \u0026#34;3001:3001\u0026#34; networks: - internal_network - external_network volumes: - ./config:/misskey/.config:ro # 用于映射配置文件，请根据您的实际配置来决定文件夹名称，设定为只读即可； - ./files:/misskey/files # 用户上传到本地的文件，如果您一开始就接入外部存储（如wasabi或是AWS S3）您可以忽略这块配置 redis: restart: unless-stopped image: redis:latest container_name: misskey_redis networks: - internal_network volumes: - ./redis:/data # redis数据库的数据文件夹映射，创建后默认在 ./redis 文件夹中 db: restart: unless-stopped image: postgres:12.2-alpine container_name: misskey_db networks: - internal_network env_file: - ./config/docker.env # 需要使用配置文件中设置的 Docker 环境变量 volumes: - ./db:/var/lib/postgresql/data # 主数据库的数据文件夹映射，创建后默认在 ./db 文件夹中 networks: internal_network: # 内部网络 internal: true external_network: # 外部网 按 esc ，按 :wq ，回车（保存-退出）\n创建 config/default.yml 目录并进入 yml 文件中\nsudo mkdir config cd config sudo vim default.yml 按 I，切换到编辑模式，填入以下内容\n#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # Misskey configuration #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # ┌─────┐ #───┘ URL └───────────────────────────────────────────────────── # Final accessible URL seen by a user. url: https://ponderduck.cc/ # 注意改成自己最后反向代理想要的网址 # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE # URL SETTINGS AFTER THAT! # ┌───────────────────────┐ #───┘ Port and TLS settings └─────────────────────────────────── # # Misskey requires a reverse proxy to support HTTPS connections. # # +----- https://example.tld/ ------------+ # +------+ |+-------------+ +----------------+| # | User | ---\u0026gt; || Proxy (443) | ---\u0026gt; | Misskey (3000) || # +------+ |+-------------+ +----------------+| # +---------------------------------------+ # # You need to set up a reverse proxy. (e.g. nginx) # An encrypted connection with HTTPS is highly recommended # because tokens may be transferred in GET requests. # The port that your Misskey server should listen on. port: 3001 # ┌──────────────────────────┐ #───┘ PostgreSQL configuration └──────────────────────────────── db: host: db port: 5432 # Database name db: misskey # Auth user: example-misskey-user pass: example-misskey-pass # Whether disable Caching queries #disableCache: true # Extra Connection options #extra: # ssl: true # ┌─────────────────────┐ #───┘ Redis configuration └───────────────────────────────────── redis: host: redis port: 6379 #family: 0 # 0=Both, 4=IPv4, 6=IPv6 #pass: example-pass #prefix: example-prefix #db: 1 # ┌─────────────────────────────┐ #───┘ Elasticsearch configuration └───────────────────────────── #elasticsearch: # host: localhost # port: 9200 # ssl: false # user: # pass: # ┌───────────────┐ #───┘ ID generation └─────────────────────────────────────────── # You can select the ID generation method. # You don\u0026#39;t usually need to change this setting, but you can # change it according to your preferences. # Available methods: # aid ... Short, Millisecond accuracy # meid ... Similar to ObjectID, Millisecond accuracy # ulid ... Millisecond accuracy # objectid ... This is left for backward compatibility # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE # ID SETTINGS AFTER THAT! id: \u0026#39;aid\u0026#39; # ┌─────────────────────┐ #───┘ Other configuration └───────────────────────────────────── # Whether disable HSTS #disableHsts: true # Number of worker processes #clusterLimit: 1 # Job concurrency per worker # deliverJobConcurrency: 128 # inboxJobConcurrency: 16 # Job rate limiter # deliverJobPerSec: 128 # inboxJobPerSec: 16 # Job attempts # deliverJobMaxAttempts: 12 # inboxJobMaxAttempts: 8 # IP address family used for outgoing request (ipv4, ipv6 or dual) #outgoingAddressFamily: ipv4 # Syslog option #syslog: # host: localhost # port: 514 # Proxy for HTTP/HTTPS #proxy: http://127.0.0.1:3128 #proxyBypassHosts: [ # \u0026#39;example.com\u0026#39;, # \u0026#39;192.0.2.8\u0026#39; #] # Proxy for SMTP/SMTPS #proxySmtp: http://127.0.0.1:3128 # use HTTP/1.1 CONNECT #proxySmtp: socks4://127.0.0.1:1080 # use SOCKS4 #proxySmtp: socks5://127.0.0.1:1080 # use SOCKS5 # Media Proxy #mediaProxy: https://example.com/proxy # Proxy remote files (default: false) #proxyRemoteFiles: true # Sign to ActivityPub GET request (default: false) #signToActivityPubGet: true #allowedPrivateNetworks: [ # \u0026#39;127.0.0.1/32\u0026#39; #] # Upload or download file size limits (bytes) #maxFileSize: 262144000 按 esc ，按 :wq ，回车（保存-退出）\n进入 env 文件\nsudo vim docker.env 按 I，切换到编辑模式，填写如下内容\n# db settings POSTGRES_PASSWORD=example-misskey-pass POSTGRES_USER=example-misskey-user POSTGRES_DB=misskey 部署 还记得我说「创建并编辑 yml 文件，让它去部署」吗？\n现在文件已经配置完毕了，是时候让它跑起来了！\n双手合十🙏\n切换到上一级目录\ncd .. 初始化数据库\nsudo docker-compose run --rm web yarn run init 后台启动项目容器\nsudo docker-compose up -d 访问站点 查看端口状态\nsudo lsof -i:\u0026lt;port\u0026gt; 假如这个端口不能用，那就换一个。\n新端口要在服务商防火墙、ufw 命令、default.yml 和 docker-compose.yml 里都开启、改过来\n然后重启 Docker\nsudo docker-compose restart [指定服务的容器] 完成这一步之后，尝试用 IP 访问站点吧\n在浏览器输入 http://\u0026lt;ip\u0026gt;:\u0026lt;port\u0026gt;（IP 可以用 curl ip.sb 返回）\n（；\n还有两个任务\nSSL 证书 反向代理 Nginx 安装 Nginx sudo apt update sudo apt install nginx 调整防火墙，允许 Nginx 服务通过\nsudo ufw allow \u0026#39;Nginx HTTP\u0026#39; sudo ufw allow \u0026#39;Nginx HTTPS\u0026#39; sudo ufw allow \u0026#39;Nginx FULL\u0026#39; 查看更改结果\nsudo ufw status 查看 Nginx 状态（是 active 就行）\nsystemctl status nginx 在浏览器输入 http://your_vps_ip，返回 Nginx 默认页面\n让 Nginx 在系统启动时自动启动\nsudo systemctl enable nginx 设置服务器块 创建站点对应目录\nsudo mkdir -p /var/www/ponderduck.cc/html 使用$USER环境变量分配目录的所有权\nsudo chown -R $USER:$USER /var/www/ponderduck.cc/html 如果我们没有修改自己的umask值，那么 Web 根目录的权限应该正确，我们可以通过输入以下命令来确认：\nsudo chmod -R 755 /var/www/ponderduck.cc 编辑index.html\nsudo vim /var/www/ponderduck.cc/html/index.html 添加以下示例HTML\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome to ponderduck.cc!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Success! The ponderduck.cc server block is working!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; 为 Nginx 创建一个服务器块\n创建一个新文件\nsudo vim /etc/nginx/sites-available/ponderduck.conf 添加以下内容\nserver { listen 80; listen [::]:80; root /var/www/ponderduck.cc/html; index index.html index.htm index.nginx-debian.html; server_name ponderduck.cc www.ponderduck.cc; location / { try_files $uri $uri/ =404; } } 通过 ls 命令在sites-enabled目录新建一个链接，好让 Nginx 在启动过程中会读取这个目录：\nsudo ln -s /etc/nginx/sites-available/ponderduck.conf /etc/nginx/sites-enabled/ 打开文件：\nsudo vim /etc/nginx/nginx.conf 找到server_names_hash_bucket_size指令并删除#符号：\n... http { ... server_names_hash_bucket_size 64; ... } ... 接下来，测试以确保我们在 Nginx 文件中的改动，没有任何问题：\nsudo nginx -t 如果没有任何问题，请重新启动 Nginx：\nsudo systemctl restart nginx 现在通过 http://ponderduck.cc\r访问服务器的时候，Nginx 会指向我们刚刚添加的那个 HTML 页面\nSSL 安装 Certbot 我们需要获得被信任的证书授权中心（ CA ）签发的安全证书。Let’s Encrypt 是 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。\nISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书\n安装 Certbot\n去 官网\r选择我正在使用的 Web 服务器（Nginx）和操作系统（Ubuntu 20），操作对应的安装步骤\nUbuntu 自带 Snap，用 Snap 安装 Certbot\nsudo snap install --classic certbot 用 ln 命令创建符号连接，将 Certbot 加入 PATH 环境变量中\nsudo ln -s /snap/bin/certbot /usr/bin/certbot 生成 SSL 证书 sudo certbot --nginx -d www.ponderduck.cc 输入邮箱地址，用于接收邮件\n输入 Y，同意协议；询问是否接收前哨基金会的邮件，接不接收都行\n返回（注意证书储存位置）\nSuccessfully received certificate. Certificate is saved at: /etc/letsencrypt/live/www.ponderduck.cc/fullchain.pem Key is saved at: /etc/letsencrypt/live/www.ponderduck.cc/privkey.pem This certificate expires on 2023-02-18. These files will be updated when the certificate renews. Certbot has set up a scheduled task to automatically renew this certificate in the background. Let\u0026rsquo;s Encrypt 的 SSL 证书会在 90 天后过期，但是 Certbot 会自动续订\n测试证书自动续订是否生效\nsudo certbot renew --dry-run 返回⬇️说明已生效\nSimulating renewal of an existing certificate for www.ponderduck.cc 找到存放站点证书的目录\nsudo ls /etc/letsencrypt/live 我的是www.ponderduck.cc 查询证书\nsudo ls /etc/letsencrypt/live/www.ponderduck.cc 返回文件名\ncert.pem chain.pem fullchain.pem privkey.pem 后两个要添加到 Nginx 配置文件 .conf 里\n反向代理 修改网站配置文件\n参考 官网文档\r，以下是我的完整文件内容\n# For WebSocket map $http_upgrade $connection_upgrade { default upgrade; \u0026#39;\u0026#39; close; } proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=cache1:16m max_size=1g inactive=720m use_temp_path=off; server { listen 80; listen [::]:80; server_name www.ponderduck.cc ponderduck.cc; # For SSL domain validation root /var/www/html; location /.well-known/acme-challenge/ { allow all; } location /.well-known/pki-validation/ { allow all; } location / { return 301 https://$server_name$request_uri; } } server { listen [::]:443 ssl http2; listen 443 ssl http2; server_name ponderduck.cc www.ponderduck.cc; ssl_session_cache shared:ssl_session_cache:10m; # ssl ssl_certificate /etc/letsencrypt/live/www.ponderduck.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.ponderduck.cc/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; ssl_stapling on; ssl_stapling_verify on; # Change to your upload limit client_max_body_size 80m; # 对\u0026#34;/\u0026#34;启用反向代理 location / { # 指定转发地址 proxy_pass http://127.0.0.1:3001; proxy_set_header Host $host; proxy_http_version 1.1; proxy_redirect off; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_cache cache1; proxy_cache_lock on; proxy_cache_use_stale updating; add_header X-Cache $upstream_cache_status; } } 接下来，测试以确保我们在 Nginx 文件中的改动，没有任何问题：\nsudo nginx -t 有问题的话按照提示修改，做完之后，重新启动 Nginx：\nsudo systemctl restart nginx 现在 SSL 证书和反向代理都生效了，尝试用域名访问站点\n完成🎉\n注册一个账号，回到命令行工具把它设置为管理员\n日常维护 更新 Docker-compose 部署\ncd data/docker_data/misskey docker-compose down cp -r /root/data/docker_data/misskey /root/data/docker_data/misskey.archive # 万事先备份，以防万一，其实这边没必要，因为我们没有映射到本地文件夹 docker-compose pull docker-compose up -d # 请不要使用docker-compose stop来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。 docker image prune # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像 提示：\nWARNING! This will remove all dangling images. Are you sure you want to continue? [y/N] 输入 y\n卸载 cd /root/data/docker_data/misskey docker-compose down rm -rf /root/data/docker_data/misskey # 完全删除映射到本地的数据 删除旧数据 docker system prune 磁盘空间分析及清理 内容主要来源：https://www.cnblogs.com/jing99/p/10487174.html\n有时候要用 sudo\ndf 命令 可以查看一级文件夹大小、使用比例、档案系统和挂入dian\n[root@oms ~]# df -Th Filesystem Type Size Used Avail Use% Mounted on /dev/vda1 ext4 40G 35G 3.1G 92% / devtmpfs devtmpfs 1.9G 0 1.9G 0% /dev tmpfs tmpfs 1.9G 0 1.9G 0% /dev/shm tmpfs tmpfs 1.9G 191M 1.7G 11% /run tmpfs tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup tmpfs tmpfs 379M 0 379M 0% /run/user/0 七个字段分别为档案系统、类型、该分割区的容量、已使用的大小、剩下的大小、使用的百分比和挂入点\ndu命令 用来查看目录或文件所占用磁盘空间的大小。常用选项组合为：du -sh [目录]\ndu -s 目录 | sort -rn #这是按字节排序 du -sh 目录 | sort -rn #这是按兆（M）来排序 #由于-sh大小显示看起来是乱的，因此建议使用du -s|sort -nr du -s 目录 | sort -rn | head #选出排在前面的10个 du -s 目录 | sort -rn | tail #选出排在后面的10个 常用选项\n-h：以人类可读的方式显示\n-a：显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小\n-s：只显示目录占用的磁盘空间大小，不显示其子目录和文件占用的磁盘空间大小\n-c：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和\n\u0026ndash;apparent-size：显示目录或文件自身的大小(文件或目录占用磁盘空间的大小与它们自身大小有时候并非完全一致)\n-l ：统计硬链接占用磁盘空间的大小\n-L：统计符号链接所指向的文件占用的磁盘空间大小。\nrm 命令 慎用\n以下待做：\nhttps://fediverse.eu.org/discussion/15/%E7%BB%99%E6%96%B0%E7%AB%99%E9%95%BF-%E5%BB%BA%E7%AB%99%E5%90%8E%E5%8F%AF%E5%8F%82%E8%80%83%E7%9A%84%E8%BF%90%E7%BB%B4%E5%8F%8A%E8%A3%85%E4%BF%AE%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C#latest\rhttps://pullopen.github.io/tags/#Mastodon\r扫描出不属于任何媒体附件的文件并移除他们 清除缓存存储 从数据库中删除未被引用的嘟文，例如来自中继的或来自本地用户不再关注的用户的嘟文，同时没有被回复的或以其他方式与之互动的 常用命令 查看 docker 容器状态\nsudo docker container stats 其它参考 mjj版的linux入门教程\r[User] Linux 新增使用者並賦予其使用 sudo 的權限\r保护好你的小鸡！保姆级服务器安全教程！\r【好玩儿的Docker项目】10分钟搭建一个去中心化微博平台——Misskey ｜二次元风格、联邦宇宙\r使用Docker最小化部署Misskey\r搭建属于自己的去中心化社交平台 Misskey\r如何在 Ubuntu 20.04 中安装和配置 Nginx\rNginx 教程：如何在 Ubuntu 20.04 下安装并配置 Nginx\r如何在Ubuntu 20.04 Nginx配置Let\u0026rsquo;s Encrypt SSL证书\r","date":"2022-11-19T20:19:15+08:00","permalink":"https://falasool.github.io/2022/misskey/","title":"Misskey 实例搭建教程"},{"content":" 安装 PicGo brew install picgo --cask 创建 GitHub 图床仓库 名称无所谓，记得勾选 README\n生成令牌（Token） 在 Account-Settings-Developer Settings-Personal Access Tokens 下生成（勾选 repo）并保存，我的Token：（隐藏）\n配置 PicGo 自定义域名是：https://cdn.jsdelivr.net/gh/\u0026lt;github用户名\u0026gt;/\u0026lt;图床仓库名\u0026gt;@\u0026lt;仓库版本号\u0026gt;/\n插件 Update：使用图片压缩插件 compress\n参考 PicGo插件开发指南1 和 issue#22 安装插件\ncd /Users/username/Library/Application\\ Support/picgo/ brew install libtool automake autoconf nasm npm cache clean --force # 删除node_modules文件夹 npm install picgo-plugin-compress --save --ignore-scripts --registry=https://registry.npm.taobao.org npm install --registry=https://registry.npm.taobao.org 重启 PicGo，在插件设置里点击⚙️，配置plugin - picgo-plugin-compress，选择压缩方式\u0026ndash; imagemin\n最后点击⚙️，启用transformer-compress\n测试图床 这张图片使用compress插件上传：\n*****\n[可选] 手动用 Squoosh\r把图片转格式（webp）并压缩\n设置成功后直接把图片放进 Typora 就OK\n锵锵～请看！！\n相关参考 PicGo\r我写博客都用了哪些工具？\rhttps://picgo.github.io/PicGo-Core-Doc/zh/dev-guide/deploy.html#gui%E6%8F%92%E4%BB%B6\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://picgo.github.io/PicGo-Core-Doc/zh/dev-guide/deploy.html#gui%E6%8F%92%E4%BB%B6\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-10-21T23:29:38+08:00","permalink":"https://falasool.github.io/2022/picture-bed/","title":"Hugo | 给博客配置图床"},{"content":" 在 zoho.com 注册账号，选择 Free Plan，Add an existing domain，接着去验证域名\n在域名托管商（比如 Cloudflare）添加一条 TXT 记录然后验证\n接着填写任意域名前缀，比如 admin，完成创建。跳过设置 Groups，来到 DNS Mapping，同样填写\n注意 DKIM\n验证后完成，到 mail.zoho.com 测试收发邮件功能\n","date":"2022-10-21T23:29:38+08:00","permalink":"https://falasool.github.io/2022/zoho-mail-services/","title":"Pleroma | 开启邮件服务（ZOHO）"},{"content":"基于 macOS Monterey，Hugo 框架和 GitHub Pages 网页寄存服务，博客主题为 Stack\r，搭建过程尽量简单，同时减少后续隐患\n预警：非常啰嗦\n前期准备 安装 Hugo # 安装 brew install hugo # 检查安装是否成功 hugo version # 返回⬇️ hugo v0.104.1+extended darwin/arm64 BuildDate=unknown 安装 Git 在 Git\r下载、安装程序，按默认选项安装即可\n设置你的用户名和邮件地址\n# 填你的 GitHub ID 和注册邮箱 git config --global user.name \u0026#34;\u0026lt;username\u0026gt;\u0026#34; git config --global user.email user@example.com GitHub https://raw.githubusercontent.com/Falasool/blog-pic-bed/main/blog/new-public-repo-1.png\rhttps://raw.githubusercontent.com/Falasool/blog-pic-bed/main/blog/image-20221115113949496.png\r创建公开仓库 存放编译好的静态页面\n创建私密仓库 存放源码\n绑定 Token 因为我们需要从博客仓库推送到外部 GitHub Pages 仓库，需要特定权限，要在 GitHub 账户下 Setting - Developer setting - Personal access tokens 下创建一个 Token Hugo + GitHub Action，搭建你的博客自动发布系统\r在 Account- Settings- Developer Settings- Personal access tokens-Tokens(classic) 里创建 Token，勾选 repo 和 workflow，并复制保存 在私有仓库 hugo-scources-settings-secrets-Actions 创建 Secret，名为 PERSONAL_TOKEN，值为刚才的 Token，这样就完成了 Token 的设置 搭建步骤 克隆 private 仓库到本地 新建 Hugo 站点 在本地 hugo-sources 文件夹中执行 ⬇️，在当前目录生成 Hugo 源码\nhugo new site . --force 找到 blog 文件夹，打开会发现结构如下\nblog ├── archetypes # 配置文件，决定创建新博文时的自带格式 │ └── default.md ├── config.toml # 网站配置文件 ├── content # 网站内容，全部是 markdown 格式 ├── data ├── layouts # 网站模板，优先于 themes/\u0026lt;THEME\u0026gt;/layouts ├── static # 静态资源（css/js/fonts/media等） └── themes Hugo 主题 有了主题，内容才会渲染出来\n在 github.com 搜索 hugo theme ，或在 Hugo Themes\r选择你喜欢的主题。我选择 stack\r，功能丰富，支持多种评论系统，使用人数多 bug 好解决\nfork 主题仓库，并使用 git submodule 方式添加到 themes 里，这样方便后续对主题的修改进行单独维护 # 在hugo-sources目录下 git init git submodule add https://github.com/\u0026lt;Uname\u0026gt;/hugo-theme-stack themes/hugo-theme-stack 更新主题： # 初始化 git submodule update --init --recursive # 同步主题仓库的最新修改 git submodule update --remote 删除根目录下的 config.toml 文件，把 ./themes/hugo-theme-stack/exampleSite/ 里的 config.yaml 和 content 转移到根目录下，在 config.yaml 中进行站点细节配置 删掉 examplesite/content/post/rich-content/index.md，因为 Twitter 等等被墙应用的 API 中国大陆无法访问 Issus #191@CaiJimmy/hugo-theme-stack\r本地预览 hugo server -D # 在浏览器打开localhost:1313 预览满意了 Control+C 终止预览 推送到 GitHub git add . git commit -m \u0026#34;first commit\u0026#34; git push -u origin main GitHub Actions 配置 在 GitHub 的 Private 仓库页面，切换到 Actions tab，点击set up a workflow yourself，粘贴以下文件，并 commit name: Deploy Hugo Site to Github Pages on Main Branch on: push: branches: - main workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#39;0 0 * * *\u0026#39; jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.104.1\u0026#39; # 查看你的版本把它替换掉，防止兼容问题 extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 external_repository: uname/uname.github.io # Pages 远程仓库 publish_dir: \u0026#39;./public\u0026#39; keep_files: false # remove existing files publish_branch: main # deploying branch commit_message: ${{ github.event.head_commit.message }} cname: anodicseal.xyz # 这里要改成你的个人域名，没有就把这行注释掉 在本地 hugo-sources 目录下执行 git pull origin main，查看本地文件夹，出现了 .github/workflows/main.yml 文件 检查流水线是否被正常触发（查看流水线日志） 博客搭建完成\n修复博客搜索功能 输入关键词后页面空白，在控制台 Network 看到是 search.json 的跨域问题。\n原因是博客使用 xx.github.io 域名后 用 CNAME 指向个人域名。模版的 {{ .Permalink }} 拿到的是配置文件里的 baseURL，所以就跨域了。最粗暴的办法，把模版写死，搜索功能就好了\n使用步骤 # 新建文章 hugo new post/\u0026lt;title\u0026gt;.md # 打开\u0026lt;title.md\u0026gt;，编辑并保存 # 本地预览 hugo server -D # 没问题了就push到远程仓库，Actions会自动部署 git add . git commit -m \u0026#34;test\u0026#34; git push origin main 拓展 Github Actions 实现的三种方案：\ngithub_token deploy_key personal_token 适用情况和差异请参考 官方文档\r相关参考 Hugo 搭建博客实践\rGit Submodule 命令与理解\rGithub Pages + Hugo 搭建个人博客\r自动发布系统\nGitHub Actions 入门教程\rWorkflow syntax for GitHub Actions\rCI/CD 是什麼？一篇認識 CI/CD 工具及優勢，將日常瑣事自動化\rHugo + GitHub Action，搭建你的博客自动发布系统\rHugo 搭配 Github Actions 實現 Github Pages 的自動部署\r利用 GitHub Action 实现 Hugo 博客在 GitHub Pages 自动部署\rGitHubAction + Hugo 自动构建发布个人博客\r使用 Github Actions 自动发布 hugo 站点\r***\n折腾 Hugo | GitHub Pages | Github Actions 自动构建发布免费个人网站\r将 Hugo 静态网站部署到 Github Pages\r用 Hugo 配合 GitHub Actions 和 GitHub Pages 搭建博客\r","date":"2022-10-21T21:28:27+08:00","permalink":"https://falasool.github.io/2022/build-hugo-site-on-macos/","title":"Hugo｜Github Pages｜Stack主题｜搭建记录"},{"content":" Update：用过 Cataus、Disqus，Cataus 和同名主题配合起来很可爱，用了一段时间 Disqus 后对它的 UI 不太满意，再加上强制登录比较恼人，就换成象友推荐的 Twikoo 试试\nTwikoo 设置数据库 MongoDB 按照 官方文档\r，我用的 Vercel 部署\n创建数据库，选 Free 方案，区域选择 AWS / N. Virginia (us-east-1)，设置并保存好用户名和密码\n在 Where would you like to connect from? 这一步填 0.0.0.0，然后点 Add Entry，最后确认创建数据库\n进入数据库，connect - Drivers - Node.js，把实例的用户名和密码改成自己的，例如：\nmongodb+srv://twikoo:fhahflanclal3o2u0@cluster0.tke1htc.mongodb.net/?retryWrites=true\u0026amp;w=majority Vercel 部署 按照文档的一键部署，等待\u0026hellip;\n在控制台 - settings - Environment Variables，添加环境变量 MONGODB_URI，值为之前的数据库连接字符串\n进入 Deployments , 然后在任意一项后面点击更多（三个点） , 然后点击Redeploy , 最后点击下面的Redeploy\n访问 Vercel 分配的域名，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示\n配置到博客 comments: enabled: true provider: twikoo twikoo: envId: https://twikoo.vercel.app/ 部署成功后点右下角↘️的齿轮⚙️图标，设置管理密码\n更新 管理页面提示：Client version: 1.5.11， Server version: 1.6.16， 请参考 版本更新\r进行升级\n在 twikoo.html 里把引入的js文件版本修改到1.6.16\nDisqus 选择 Disqus 是因为 Hugo 内置了它的模板，同时它对迁移的支持较好，本身功能非常齐全，比较遗憾的是从 2015 年开始被墙了\n参考 官方文档\r基础设置 在 Disqus\r注册并登录账号，添加站点（选择I want to install Disqus on my site）\n输入你想要的 Website Name，用作插入 config 文件的名字，后期可以在 Disqus -\u0026gt; Setting -\u0026gt; General 下查看和修改\n在 Configure Disqus for Your Site 页面输入 Website URL，要输入完整的地址，比如如果像我一样使用的是 GitHub Pages ，就要加上 https:// 的协议名；\n选择 Category，点击 Create Site 完成注册\n选择方案，我选 free\n编辑博客的配置文件 config.yaml，添加 disqusShortname 设置\n# 在第 23 行左右 disqusShortname: YOURSITENAME 可选项 添加可信域 Disqus 的站点名称是公开的，如果要防止被别人滥用，可以进行域名绑定，只允许信任的域名使用你的评论\n在 Disqus -\u0026gt; Site -\u0026gt; Advanced 添加 Trusted Domains\n特定博文开启/关闭评论 https://lvv.me/posts/2019/12/10_hugo_disqus/\r相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\n在静态博客里添加Twikoo评论系统，并配置邮箱和TG通知\r科学使用 Disqus\rDisqus评论框改造工程-实现 Disqus 代理的 Serverless 服务\rDisqusJS - 一个超轻量级的 DISQUS「评论基础模式」的实现\r给 Hugo 开启 Disqus 评论系统\r","date":"2022-10-14T19:12:42+08:00","permalink":"https://falasool.github.io/2022/hugo-comment-system-disqusjs/","title":"Hugo | 给博客添加评论系统"},{"content":"什么是 Front Matter 是指 .md 文件最上面的这一部分内容\n--- title: xxxxxx date: 2022-10-10 09:39:50 type: tags layout: tags= --- 每次执行 hugo new 命令新建文章时，Hugo 会从 ./archetypes 中寻找对应的 Front Matter 模板并自动添加到新建文件的最上方\nFront Matter 里的参数定义了所在博文的外观、功能\n常用 Front Matter 设置 没有兴趣客制化可以复制以下代码，添加进 ./archetypes/default.md 文件\n--- # 使用时需删除注释和空行 # 创建和文件名相同的文章标题 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: \u0026#34;\u0026#34; # 优化 URL slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; author: [\u0026#34;Rubberduck\u0026#34;] type: post/draft/page date: {{ .Date }} draft: false # 随机匹配一张图片 image: https://picsum.photos/800/600.webp?random={{ substr (md5 (.Date)) 4 8 }} categories: [\u0026#34;Tutorials\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;,\u0026#34;tech\u0026#34;] keywords: [\u0026#34;tutorials\u0026#34;, \u0026#34;Hugo\u0026#34;, \u0026#34;mac\u0026#34;,\u0026#34;tech\u0026#34;] metaAlignment: center coverMeta: in/out coverSize: partial coverCaption: \u0026#34;文章cover图片描述\u0026#34; isCJKLanguage: true --- 下面具体说明各项参数，\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 type 文章类别，可选post/page/draft等等 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考官方文档 Hugo｜Front Matter\r相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\n貼身打造個人部落格 - 02. 文章 Front Matter\rHugo之路 2 | hugo-theme-stack 配置\r—— 参考了匹配随机图片的代码\n","date":"2022-10-12T20:08:18+08:00","permalink":"https://falasool.github.io/2022/hugo-front-matter/","title":"Hugo | Front Matter"},{"content":"前期准备 安装 Hugo 打开 Github 中的 Hugo\r库，下载最新的版本，本次下载：hugo_extended_0.99.1_Windows-64bit.zip 因为一些主题需要进行 SCSS/SASS 构建，所以推荐下载 extended 版本，普通版本可能会报错：you need the extended version to build SCSS/SASS 配置环境变量 在 控制面板 -\u0026gt; 系统 -\u0026gt; 高级系统设置 -\u0026gt; 高级 中找到环境变量 在用户变量中找到 Path 变量，点击编辑，在弹出的窗口中选择新建，输入 Hugo.exe 文件的文件夹路径（不要包括 Hugo.exe 本身） 测试配置是否成功：在 E:\\ 空白处右键，点击 Git Bash Here ，在命令行中输入 hugo version ，若返回 Hugo 版本号信息，说明配置成功 安装 Git 在 Git\r下载、安装程序，按默认选项安装即可\n设置 在开始菜单找到 Git Bash ，打开输入：\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; 配置 SSH SSH 密钥用来链接本地和 Git 服务器，它成对生成，分别是” 公钥 “和” 私钥 “，我们将其中的” 公钥 “保存到 Git 仓库后，就可以在电脑上向这个 Git 仓库提交代码。\n生成 SSH 在 Git Bash Here 里输入：\nssh-keygen -t rsa -C\u0026#34;注册 github 账号时使用的邮箱\u0026#34; 按照系统提示指定密钥位置、是否需要密码，懒得设置可以直接回车，显示如下结果说明 SSH 生成成功：\nYour identification has veen saved in id_rsa Your public key has been saved in id_rsa.pub 连接 SSH 在 C:/Users/用户名/.ssh/ 路径找到公钥 id_rsa.pub ，右键用记事本打开，复制全部内容到 Github 账号 -\u0026gt; Settings -\u0026gt; SSH and GPG keys ，新建一个 SSH 密钥，把公钥粘贴保存 测试 SSH 连接是否完成，在 Git Bash Here 输入：\nssh -T git@github.com 如果返回：\nHi username!YOu\u0026#39;ve successfully authenticated,but GitHub does not provide shell access. 说明 SSH 连接成功\n创建 Github 仓库 注意仓库名要和 GitHub 用户名一致，比如你是 xiaohong，那么你要输入 xiaohong.github.io ，最终仓库的完整名是 xiaohong/xiaohong.github.io\n安装 VSCode Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器\n在 官方下载地址\r选择相应的版本下载，按照默认选项安装，安装汉化插件 Chinese (Simplified) Language Pack for Visual Studio Code\n安装 Typora（可选） Typora\r是一款轻型 MarkDown 编辑器，其实 VSCode 安装 md 插件后也能胜任它的工作，但是我们就让专业的 Typora 做专业的事吧\n在官网 releases 页面购买，或点击 Dev/Beta Released -\u0026gt; 下拉到底端 old macOS beta/old Windows/Linux beta 下载 beta 版\n⚠️ 建议在偏好设置里，设置插入图片时复制到指定路径（./xx/），这样复制的图片就会自动保存在当前文件夹下的xx文件夹里，方便后续管理与转移。\n开始建站 新建 Hugo 网站 新建一个文件夹用来存放 Hugo 网站的文件，例如：H:/HugoWebsite 在 HugoWebsite 文件夹内空白处点击右键，选择 Git Bush Here ，执行以下命令，新建一个 Hugo 网站 hugo new site blog # blog是网站文件夹名 选择 Hugo 主题 在 github.com 搜索 hugo theme ，或在 Hugo Themes\r选择你喜欢的主题。此处以 cactus\r举例\n⚠️ 推荐将主题仓库 fork 到自己的账号，使用 git submodule 方式进行仓库连接，这样方便后续对主题的修改进行单独维护（否则\ncd blog git init git submodule add https://github.com/monkeyWzr/hugo-theme-cactus themes/hugo-theme-cactus ⚠️ git clone 命令也可以，就是修改可能会和原主题冲突，不方便版本管理和后续更新，在文件夹 blog 空白处右键点击 Git Bush Here\n# 进入 themes 目录，如果没有这个文件夹用 mkdir -p themes 自行创建 cd themes # 下载主题到 cactus 文件夹下 git clone git@github.com:monkeyWzr/hugo-theme-cactus.git 配置主题 备份 blog 文件夹里的 config.toml 文件，用 blog/themes/hugo-theme-cactus/exampleSite/ 下的 config.toml 覆盖 blog 文件夹下的 config.toml ，然后打开 config.toml 修改配置\n必要的修改 # 修改 URL 为你的 GitHub 仓库名称 baseURL = \u0026#34;https://username.github.io\u0026#34; # 这里必须和 themes 文件夹里的主题文件夹名称一致，所以把主题文件名从 hugo-theme-cactus 修改为 cactus theme = \u0026#34;cactus\u0026#34; 本地预览 新建文章 在网站文件根目录：E:\\HugoWebsite\\blog 下执行：\nhugo new post/first_article.md 到 blog/content/post 里打开并编辑文章内容，保存\n启动 Hugo server hugo server -D 打开网址 http://localhost:1313/ 进行预览，在 config.toml 里调整页面效果\n部署到 GitHub 进入 E:\\HugoWebsite\\blog\\public 目录，初始化 Git 库\n# 进入 public 文件夹 cd public # 初始化 git init # 将 git 本地库关联至远程库 git remote add origin git@github.com:username/username.github.io.git # 提交修改 git commit -m \u0026#34;firstarticle\u0026#34; # 查看当前修改状态 git status # 添加所有修改过的文件 git add . # 提交到本地库，\u0026#34;add first-post\u0026#34;是本次提交内容的说明信息 git commit -m\u0026#34;add first-post\u0026#34; # 提交到远程库 git push origin main ✨ 曾经 github 的默认分支是 master，时间比较久的教程「提交到远程库」这一步都是git push origin master ，这里要注意\n日常使用博客要知道的 Front Matter 什么是 Front Matter 是指 .md 文件最上面的这一部分内容\ntitle: tags\ndate: 2019-08-13 09:39:50\ntype: tags\nlayout: tag\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件自带的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考Hugo｜Front Matter\r如何新建或修改博文 # 在根目录：E:/HugoWebsite/blog 下新建文章或编辑文章 hugo new post/title.md # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public cd public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 如何删除文章 # 在目录 E:/HugoWebsite/blog/content/post 和 E:/HugoWebsite/blog/public 找到对应文章删除 # 其中public下文件不删除不会影响显示，只是文件就会一直存在，除.git删错了也不要紧，hugo命令会重建 # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 装修没有止境 评论系统用 cactus，原装！可爱！\n（202210:换了主题所以不再补充了）\n报错和解决方法 相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\nGithub Pages + Hugo 搭建个人博客\rHugo | 一起动手搭建个人博客吧\r记录一下如何用 Hugo 和 Github Page 建立简单的博客 Blog\rHugo 从入门到会用\r小白如何低成本建立个人网站或作品集（详细教程）\r使用 Hugo 和 GitHub 搭建博客\r***\nfront-matter 使用详解\rhugo 建站全指南 | 我的第一个博客网站\r在静态网站上包含评论的各种方法\r***\n為你自己學Git｜怎麼有時候推不上去\rGit 把本地仓库与 GitHub 远程仓库关联进行同步\r将 Git 默认分支从 master 修改为 main\r","date":"2022-10-12T16:06:44+08:00","permalink":"https://falasool.github.io/2022/build-blog-site-use-hugo-win/","title":"Hugo | 初次搭建记录"}]