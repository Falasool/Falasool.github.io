[{"content":" 安装 PicGo 1 brew install picgo --cask 创建 GitHub 图床仓库 名称无所谓，记得勾选 README\n生成令牌（Token） 在 Account-Settings-Developer Settings-Personal Access Tokens 下生成（勾选 repo）并保存，我的Token：（隐藏）\n配置 PicGo 测试图床 设置成功后直接把图片粘贴进文档就OK\n相关参考 PicGo\n","date":"2022-10-21T23:29:38+08:00","image":"https://picsum.photos/800/600.webp?random=fa517d08","permalink":"https://anodicseal.xyz/2022/10/21/picture-bed/","title":"借助 PicGo 和 GitHub 实现插入图片"},{"content":"基于 macOS Monterey，Hugo 框架和 GitHub Pages 网页寄存服务，博客主题为 Stack，搭建过程尽量简单，同时减少后续隐患\n前期准备 安装 Hugo 1 2 3 4 5 6 7 # 安装 brew install hugo # 检查安装是否成功 hugo version # 返回⬇️ hugo v0.104.1+extended darwin/arm64 BuildDate=unknown 安装 Git 在 Git 下载、安装程序，按默认选项安装即可\n设置你的用户名和邮件地址\n1 2 3 # 填你的 GitHub ID 和注册邮箱 git config --global user.name \u0026#34;\u0026lt;username\u0026gt;\u0026#34; git config --global user.email user@example.com GitHub 创建公开仓库 存放编译好的静态页面\n创建私密仓库 存放源码\n给两个仓库绑定 SSH key 生成 SSH key 1 ssh-keygen -t rsa -b 4096 -C \u0026#34;user@example.com\u0026#34; 在 .ssh 文件夹里找到生成的 SSH\n添加公钥：把 public key id_rsa_hugo_deploy.pub 添加到 .github.io 仓库: 1 2 cd .ssh cat id_rsa_hugo_deploy.pub 添加私钥：Private Key 添加到 private仓库： 这里 Secrets 变量名要一定是： ACTIONS_DEPLOY_KEY 绑定 Token 在 Account- Settings- Developer Settings- Personal access tokens-Tokens(classic) 里创建 Token，记得勾选 repo 和 workflow，并复制保存。我的 Token: （隐藏） 在私有仓库 hugo-scources-settings-secrets-Actions 创建名为PERSONAL_TOKEN，值为刚才的 Token 的Secret，这样就完成了 Token 的设置 搭建步骤 克隆 private 仓库到本地 新建 Hugo 站点 在本地 hugo-sources 文件夹中执行 ⬇️，在当前目录生成 Hugo 源码\n1 hugo new site . --force 找到 blog 文件夹，打开会发现结构如下\n1 2 3 4 5 6 7 8 9 blog ├── archetypes # 配置文件，决定创建新博文时的自带格式 │ └── default.md ├── config.toml # 网站配置文件 ├── content # 网站内容，全部是 markdown 格式 ├── data ├── layouts # 网站模板，优先于 themes/\u0026lt;THEME\u0026gt;/layouts ├── static # 静态资源（css/js/fonts/media等） └── themes Hugo 主题 有了主题，内容才会渲染出来\n在 github.com 搜索 hugo theme ，或在 Hugo Themes 选择你喜欢的主题。我选择 stack ，功能丰富，支持多种评论系统，使用人数多bug好解决\nfork 主题仓库，并使用 git submodule 方式添加到 themes 里，这样方便后续对主题的修改进行单独维护 1 2 3 # 在hugo-sources目录下 git init git submodule add https://github.com/Falasool/hugo-theme-stack themes/hugo-theme-stack 更新主题： 1 2 3 4 # 初始化 git submodule update --init --recursive # 同步主题仓库的最新修改 git submodule update --remote 删除根目录下的config.toml 文件，把 ./themes/hugo-theme-stack/exampleSite/ 里的 config.yaml 和 content 转移到根目录下，在 config.yaml 中进行站点细节配置 删掉 examplesite/content/post/rich-content/index.md，因为Twitter 等等被墙应用的API 中国大陆无法访问 Issus #191@CaiJimmy/hugo-theme-stack 本地预览 1 2 hugo server -D # 在浏览器打开localhost:1313 预览满意了 Control+C 终止预览 推送到 GitHub 1 2 3 git add . git commit -m \u0026#34;first commit\u0026#34; git push -u origin main GitHub Actions 配置 在 GitHub 的 Private 仓库页面，切换到 Actions tab，点击set up a workflow yourself，粘贴以下文件，并 commit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 name: Deploy Hugo Site to Github Pages on Main Branch on: push: branches: - main workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.104.1\u0026#39; # 查看你的版本把它替换掉，防止兼容问题 extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 external_repository: Falasool/Falasool.github.io # Pages 远程仓库 publish_dir: \u0026#34;./public\u0026#34; keep_files: false # remove existing files publish_branch: main # deploying branch commit_message: ${{ github.event.head_commit.message }} 在本地 hugo-sources 目录下执行 git pull origin main，查看本地文件夹，出现了 .github/workflows/main.yml 文件 检查流水线是否被正常触发（查看流水线日志） 博客搭建完成\n使用步骤 1 2 3 4 5 6 7 8 9 # 新建文章 hugo new post/\u0026lt;title\u0026gt;.md # 打开\u0026lt;title.md\u0026gt;，编辑并保存 # 本地预览 hugo server -D # 没问题了就push到远程仓库，Actions会自动部署 git add . git commit -m \u0026#34;test\u0026#34; git push origin main 拓展 Github Actions 实现的三种方案：\ngithub_token deploy_key personal_token 适用情况和差异请参考 官方文档\n相关参考 Hugo 搭建博客实践\nGit Submodule 命令与理解\nGithub Pages + Hugo 搭建个人博客\n自动发布系统\nGitHub Actions 入门教程\nWorkflow syntax for GitHub Actions\nCI/CD是什麼？一篇認識CI/CD工具及優勢，將日常瑣事自動化\nHugo + GitHub Action，搭建你的博客自动发布系统\nHugo 搭配 Github Actions 實現 Github Pages 的自動部署\n利用GitHub Action实现Hugo博客在GitHub Pages自动部署\nGitHubAction + Hugo 自动构建发布个人博客\n使用 Github Actions 自动发布 hugo 站点\n***\n折腾Hugo | GitHub Pages | Github Actions自动构建发布免费个人网站\n将Hugo静态网站部署到Github Pages\n用 Hugo 配合 GitHub Actions 和 GitHub Pages 搭建博客\n","date":"2022-10-21T21:28:27+08:00","image":"https://picsum.photos/800/600.webp?random=6e5ecc50","permalink":"https://anodicseal.xyz/2022/10/21/build-hugo-site-on-macos/","title":"Hugo｜Github Pages｜Stack主题｜搭建记录"},{"content":"什么是 Front Matter 是指 .md 文件最上面的这一部分内容\n1 2 3 4 5 6 --- title: xxxxxx date: 2022-10-10 09:39:50 type: tags layout: tags= --- 每次执行 hugo new 命令新建文章时，Hugo 会从 ./archetypes 中寻找对应的 Front Matter 模板并自动添加到新建文件的最上方\nFront Matter 里的参数定义了所在博文的外观、功能\n常用 Front Matter 设置 没有兴趣客制化可以复制以下代码，添加进 ./archetypes/default.md 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 --- # 使用时需删除注释和空行 # 创建和文件名相同的文章标题 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: \u0026#34;\u0026#34; # 优化 URL slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; author: [\u0026#34;Rubberduck\u0026#34;] type: post/draft/page date: {{ .Date }} draft: false # 随机匹配一张图片 image: https://picsum.photos/800/600.webp?random={{ substr (md5 (.Date)) 4 8 }} categories: [\u0026#34;Tutorials\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;,\u0026#34;tech\u0026#34;] keywords: [\u0026#34;tutorials\u0026#34;, \u0026#34;Hugo\u0026#34;, \u0026#34;mac\u0026#34;,\u0026#34;tech\u0026#34;] metaAlignment: center coverMeta: in/out coverSize: partial coverCaption: \u0026#34;文章cover图片描述\u0026#34; isCJKLanguage: true --- 下面具体说明各项参数，\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 type 文章类别，可选post/page/draft等等 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考官方文档 Hugo｜Front Matter\n相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\n貼身打造個人部落格 - 02. 文章 Front Matter\nHugo之路 2 | hugo-theme-stack 配置 —— 参考了匹配随机图片的代码\n","date":"2022-10-12T20:08:18+08:00","image":"https://picsum.photos/800/600.webp?random=5fe4fd89","permalink":"https://anodicseal.xyz/2022/10/12/hugo-front-matter/","title":"Hugo | Front Matter"},{"content":"前期准备 安装 Hugo 打开 Github 中的 Hugo 库，下载最新的版本，本次下载：hugo_extended_0.99.1_Windows-64bit.zip 因为一些主题需要进行 SCSS/SASS 构建，所以推荐下载 extended 版本，普通版本可能会报错：you need the extended version to build SCSS/SASS 配置环境变量 在 控制面板 -\u0026gt; 系统 -\u0026gt; 高级系统设置 -\u0026gt; 高级 中找到环境变量 在用户变量中找到 Path 变量，点击编辑，在弹出的窗口中选择新建，输入 Hugo.exe 文件的文件夹路径（不要包括 Hugo.exe 本身） 测试配置是否成功：在 E:\\ 空白处右键，点击 Git Bash Here ，在命令行中输入 hugo version ，若返回 Hugo 版本号信息，说明配置成功 安装 Git 在 Git 下载、安装程序，按默认选项安装即可\n设置 在开始菜单找到 Git Bash ，打开输入：\n1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; 配置 SSH SSH 密钥用来链接本地和 Git 服务器，它成对生成，分别是” 公钥 “和” 私钥 “，我们将其中的” 公钥 “保存到 Git 仓库后，就可以在电脑上向这个 Git 仓库提交代码。\n生成 SSH 在 Git Bash Here 里输入：\n1 ssh-keygen -t rsa -C\u0026#34;注册 github 账号时使用的邮箱\u0026#34; 按照系统提示指定密钥位置、是否需要密码，懒得设置可以直接回车，显示如下结果说明 SSH 生成成功：\n1 2 Your identification has veen saved in id_rsa Your public key has been saved in id_rsa.pub 连接 SSH 在 C:/Users/用户名/.ssh/ 路径找到公钥 id_rsa.pub ，右键用记事本打开，复制全部内容到 Github 账号 -\u0026gt; Settings -\u0026gt; SSH and GPG keys ，新建一个 SSH 密钥，把公钥粘贴保存 测试 SSH 连接是否完成，在 Git Bash Here 输入：\n1 ssh -T git@github.com 如果返回：\n1 Hi username!YOu\u0026#39;ve successfully authenticated,but GitHub does not provide shell access. 说明 SSH 连接成功\n创建 Github 仓库 注意仓库名要和 GitHub 用户名一致，比如你是 xiaohong，那么你要输入 xiaohong.github.io ，最终仓库的完整名是 xiaohong/xiaohong.github.io\n安装 VSCode Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器\n在 官方下载地址 选择相应的版本下载，按照默认选项安装，安装汉化插件 Chinese (Simplified) Language Pack for Visual Studio Code\n安装 Typora（可选） Typora 是一款轻型 MarkDown 编辑器，其实 VSCode 安装 md 插件后也能胜任它的工作，但是我们就让专业的 Typora 做专业的事吧\n在官网 releases 页面购买，或点击 Dev/Beta Released -\u0026gt; 下拉到底端 old macOS beta/old Windows/Linux beta 下载 beta 版\n⚠️ 建议在偏好设置里，设置插入图片时复制到指定路径（./xx/），这样复制的图片就会自动保存在当前文件夹下的xx文件夹里，方便后续管理与转移。\n开始建站 新建 Hugo 网站 新建一个文件夹用来存放 Hugo 网站的文件，例如：H:/HugoWebsite 在 HugoWebsite 文件夹内空白处点击右键，选择 Git Bush Here ，执行以下命令，新建一个 Hugo 网站 1 hugo new site blog # blog是网站文件夹名 选择 Hugo 主题 在 github.com 搜索 hugo theme ，或在 Hugo Themes 选择你喜欢的主题。此处以 cactus 举例\n⚠️ 推荐将主题仓库 fork 到自己的账号，使用 git submodule 方式进行仓库连接，这样方便后续对主题的修改进行单独维护（否则\n1 2 3 cd blog git init git submodule add https://github.com/monkeyWzr/hugo-theme-cactus themes/hugo-theme-cactus ⚠️ git clone 命令也可以，就是修改可能会和原主题冲突，不方便版本管理和后续更新，在文件夹 blog 空白处右键点击 Git Bush Here\n1 2 3 4 5 # 进入 themes 目录，如果没有这个文件夹用 mkdir -p themes 自行创建 cd themes # 下载主题到 cactus 文件夹下 git clone git@github.com:monkeyWzr/hugo-theme-cactus.git 配置主题 备份 blog 文件夹里的 config.toml 文件，用 blog/themes/hugo-theme-cactus/exampleSite/ 下的 config.toml 覆盖 blog 文件夹下的 config.toml ，然后打开 config.toml 修改配置\n必要的修改 1 2 3 4 5 # 修改 URL 为你的 GitHub 仓库名称 baseURL = \u0026#34;https://username.github.io\u0026#34; # 这里必须和 themes 文件夹里的主题文件夹名称一致，所以把主题文件名从 hugo-theme-cactus 修改为 cactus theme = \u0026#34;cactus\u0026#34; 本地预览 新建文章 在网站文件根目录：E:\\HugoWebsite\\blog 下执行：\n1 hugo new post/first_article.md 到 blog/content/post 里打开并编辑文章内容，保存\n启动 Hugo server 1 hugo server -D 打开网址 http://localhost:1313/ 进行预览，在 config.toml 里调整页面效果\n部署到 GitHub 进入 E:\\HugoWebsite\\blog\\public 目录，初始化 Git 库\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 进入 public 文件夹 cd public # 初始化 git init # 将 git 本地库关联至远程库 git remote add origin git@github.com:username/username.github.io.git # 提交修改 git commit -m \u0026#34;firstarticle\u0026#34; # 查看当前修改状态 git status # 添加所有修改过的文件 git add . # 提交到本地库，\u0026#34;add first-post\u0026#34;是本次提交内容的说明信息 git commit -m\u0026#34;add first-post\u0026#34; # 提交到远程库 git push origin main ✨ 曾经 github 的默认分支是 master，时间比较久的教程「提交到远程库」这一步都是git push origin master ，这里要注意\n日常使用博客要知道的 Front Matter 什么是 Front Matter 是指 .md 文件最上面的这一部分内容\ntitle: tags\ndate: 2019-08-13 09:39:50\ntype: tags\nlayout: tag\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件自带的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考Hugo｜Front Matter\n如何新建或修改博文 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 在根目录：E:/HugoWebsite/blog 下新建文章或编辑文章 hugo new post/title.md # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public cd public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 如何删除文章 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 在目录 E:/HugoWebsite/blog/content/post 和 E:/HugoWebsite/blog/public 找到对应文章删除 # 其中public下文件不删除不会影响显示，只是文件就会一直存在，除.git删错了也不要紧，hugo命令会重建 # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 装修没有止境 评论系统用 cactus，原装！可爱！\n（202210:换了主题所以不再补充了）\n报错和解决方法 相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\nGithub Pages + Hugo 搭建个人博客\nHugo | 一起动手搭建个人博客吧\n记录一下如何用 Hugo 和 Github Page 建立简单的博客 Blog\nHugo 从入门到会用\n小白如何低成本建立个人网站或作品集（详细教程）\n使用 Hugo 和 GitHub 搭建博客\n***\nfront-matter 使用详解\nhugo 建站全指南 | 我的第一个博客网站\n在静态网站上包含评论的各种方法\n***\n為你自己學Git｜怎麼有時候推不上去\nGit 把本地仓库与 GitHub 远程仓库关联进行同步\n将 Git 默认分支从 master 修改为 main\n","date":"2022-10-12T16:06:44+08:00","image":"https://picsum.photos/800/600.webp?random=1912f23e","permalink":"https://anodicseal.xyz/2022/10/12/build-blog-site-use-hugo-win/","title":"Hugo | Github Pages ｜ cactus主题 | win10搭建记录"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://anodicseal.xyz/2019/03/11/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://anodicseal.xyz/2019/03/11/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"فقرة 1 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nفقرة 2 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nتجربة RTL كلمة 1 Text كلمة 2\n","date":"2019-03-09T00:00:00Z","image":"https://anodicseal.xyz/2019/03/09/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://anodicseal.xyz/2019/03/09/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/","title":"مثال نص"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://anodicseal.xyz/2019/03/08/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://anodicseal.xyz/2019/03/05/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://anodicseal.xyz/2019/03/05/emoji-support/","title":"Emoji Support"}]