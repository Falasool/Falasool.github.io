[{"content":"啰嗦预警\n多图预警\n购买 VPS ⚠️不要买机房在大陆的服务商 VPS ⚠️\n在备案通过之前 80 和 443 端口是封禁的 -\u0026gt; 无法申请 SSL 证书 -\u0026gt; Misskey 需要 SSL 才能访问，GG\n（即使没有这个问题，买大陆节点的服务建站也是一种自杀行为）\n注册 Vultr 账号，充值\n创建 VPS 选 Cloud Computer\nCPU 选 AMD 和 Intel 都行\n机房位置选择日本、新加坡、美西都行，一般不推荐欧洲（对于中国国内）\n选择操作系统：Ubuntu 22.10 x64\n选择 Size：$5 的 1C1G1TB 套餐（记得勾选 No Thanks）\n关闭自动备份，省 $1\nAdditional Features：勾选 Enable IPv6\n这时底部付款栏应该显示 $5.00/month ，点击 Deploy Now 确认创建服务器，等待一会，等 Status 变成 Running 就好了\n点击刚刚创建的 VPS，看到如下界面。\n左下角的 IP Address、Username、Password 是待会连接服务器的时候，要用到的 SSH 连接信息\n登录 VNC：查看控制台，类似 Xshell 但是功能没那么丰富 关机：就和关电脑一样（关机的时候仍然在计费哦！） 重启：就和重启电脑一样 重装系统：把服务器重置成刚创建时的状态 销毁/删除：销毁了服务器就不计费了，数据丢失，无法找回 Snapshots：快照，指将当前 VPS 的状态保存下来，对 VPS 进行完整备份\n服务器创建完成\n检查 IP Ping 一下 IP\n用检查工具比如 https://ip112.cn/ 检查 IP，此 IP 可用\n域名 在域名商 Dynadot 注册账号，买一个域名\n解析域名 依次点击\n暂停⏸️\n去 CloudFlare 注册登录账号，依次操作：\n添加新站点\n输入你的域名\n选择免费方案\n添加 DNS 解析记录\n* 是通配符，意思是我的二级域名，xxx.ponderduck.cc 的 DNS 解析也一起被接管了。不用我一个一个设置\n第二行是域名本体\nwww 让输入 www.ponderduck.cc 也能访问\n复制 CloudFlare 提供的两个名称服务器，填进 Dynadot 的 DNS 设置，保存\n回到 CloudFlare 点击 Done, check nameservers，等一会\n测试，ping 你的域名，返回服务器 IP 说明解析生效\n✅域名解析完成\n配置 VPS 对哪一步不自信，可以在开始做之前先去服务器管理面板创建一个快照（snapshots），快照就是存档点\n远程连接 Win 用户推荐用 Xshell，Mac 用自带的 Terminal 就可以\n1 ssh root@207.143.88.12 # 换成你的ip地址，回车 然后把密码从 vultr 复制过来回车，连接成功则会看到类似这样的提示：\n安全设置 因为 root 权限太太太强大，为了避免婴儿（我）拿核武器发射按钮的情况出现，创建一个普通用户日常使用\n新建普通用户并设定密码 1 adduser vpsadmin 然后输入密码-确认密码（太简单会被拒绝==）\n赋予 「vpsadmin」 使用 sudo 指令的权限 什么是 su 和 sudo 请看：Linux 的 su 與 sudo 指令教學與範例\n1 sudo adduser vpsadmin sudo 另外开一个终端窗口，登录 vpsadmin 账号\n1 ssh vpsadmin@185.202.62.49 # 换成你的IP，回车，然后输入密码 验证是否获得 sudo 权限\n1 sudo ls -al /root 返回类似内容（展示 /root 目录下的资料）就表示成功了\n禁止 root 登录 登录 root 账户，输入\n1 nano /etc/ssh/sshd_config 使用 control + W 进入搜索模式，输入 PerimitRootLogin 并回车，找到所在行，改成（记得要取掉注释 #！！）\n1 PermitRootLogin: no *prohibit-password/without-password 意为禁止密码登录\n使用 control + O，保存更改，control + X 退出\n重新启动 SSH 服务\n1 sudo /etc/init.d/ssh restart 打开一个新窗口，尝试用 root 登录\n✅成功禁止 root 登录\n从现在开始，用「vpsadmin」这个账户远程连接 VPS 吧\n搭建环境 修改服务器时间 查看时间\n1 timedatectl 列出所有时区\n1 timedatectl list-timezones 改成香港🇭🇰\n1 sudo timedatectl set-timezone Asia/Hong_Kong 安装常用命令 1 sudo apt-get install curl wget screen tree -y *curl用于请求 Web 服务器\n*wget用来下载软件包\n*screen用于命令行终端的窗口切换\n*tree用于显示当前文件夹的目录结构\n（如果你有其它要用的也一起加进来，或者要用了再用这个命令单独安装也可以）\n添加 SWAP swap 是 Linux 中的虚拟内存，用于在物理内存不足的情况下储存临时数据，可以提升小内存 VPS 的运行效率\n确认是否已存在 SWAP\n1 free -m 有 Swap 项而且 total 列不为零，说明 Swap 已存在，可以自行修改分区容量，参考：为 Linux 添加 swap 分区或修改 swap 分区容量\n配置防火墙 1 2 sudo ufw allow OpenSSH sudo ufw enable 打开防火墙\n1 2 sudo ufw allow http sudo ufw allow https 打开 80、443 的端口\n1 2 sudo ufw allow 80/tcp sudo ufw allow 443/tcp （其它服务需要的端口也用 sudo ufw allow xx/tcp 开启）\n验证防火墙是否打开，端口是否开启\n1 sudo ufw status 和其它服务商不同，Vultr 没有默认防火墙设置，所以要自己开启\n在 Vultr 添加防火墙规则\n安装 Docker 和 Docker Compose *Compose 是 Docker 的一个命令行工具，通过 yml 文件定义、创建、管理多容器的 Docker 应用\n跟着 如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose 丝滑完成安装\n推荐：Docker Commands Tutorial | Getting Started With Docker In Linux\n修改 Docker 配置 Docker 的配置文件路径是 /etc/docker/daemon.json，需要手动创建：\n进入 /etc 目录\n1 cd /etc 进入 docker 目录\n1 cd docker 用 vim 编辑 daemon.json 文件\n1 sudo vim daemon.json 进入 vim 后输入如下内容，这段代码会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，限制日志文件的大小（20M），限制日志文件数量，防止 Docker 日志过多占用硬盘\n（代码来自烧饼博客）\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;20m\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;ipv6\u0026#34;: true, \u0026#34;fixed-cidr-v6\u0026#34;: \u0026#34;fd00:dead:beef:c0::/80\u0026#34;, \u0026#34;experimental\u0026#34;:true, \u0026#34;ip6tables\u0026#34;:true } ⚠️ vim 和普通键入略有不用\n首先 I 进入编辑模式，输入内容（注意格式：大括号 {} 里的内容除了最后一行，都必须用英文逗号 , 结尾）\n完成输入后，按 esc 回到一般模式\n输入 :wq ，回车（意为保存-离开）\n不放心可以再次进入 daemon.json 检查是否成功写入，效果类似：\n了解：Linux vi/vim 是什么，怎么使用\n重启 Docker 服务\n1 2 sudo systemctl daemon-reload sudo systemctl restart docker 检查 Docker 是否正在运行 1 sudo systemctl status docker 换个方式，再测试一下\n1 sudo docker run hello-world 终于成功了 😭\n文件管理 给 Docker 的数据和配置文件新建一个文件夹\n1 mkdir -p data/docker_data Misskey 创建安装目录 之前给 Docker 的数据和配置文件新建一个目录 docker_data，这个文件夹就是包住整个 Misskey 的盒子\n进入目录\n1 cd data/docker_data 创建 misskey 文件夹\n1 sudo mkdir misskey 配置安装文件 进入 misskey 文件夹\n1 cd misskey 创建并编辑 yml 文件，让它去部署\n1 sudo vim docker-compose.yml 把以下内容粘贴进去\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Misskey minimal deploy config version: \u0026#34;3\u0026#34; services: web: restart: unless-stopped # always意味着自动重启，请注意如果您对您的配置没有信心，请不要开启这个选项，以避免进程崩溃反复重启耗费大量资源！ image: misskey/misskey:latest # 这里使用了官方镜像，以避免本地构建时资源不足的问题 container_name: misskey_web # 容器名，方便管理，您可以自行修改为您觉得合适的内容 links: - db - redis ports: - \u0026#34;3001:3001\u0026#34; networks: - internal_network - external_network volumes: - ./config:/misskey/.config:ro # 用于映射配置文件，请根据您的实际配置来决定文件夹名称，设定为只读即可； - ./files:/misskey/files # 用户上传到本地的文件，如果您一开始就接入外部存储（如wasabi或是AWS S3）您可以忽略这块配置 redis: restart: unless-stopped image: redis:latest container_name: misskey_redis networks: - internal_network volumes: - ./redis:/data # redis数据库的数据文件夹映射，创建后默认在 ./redis 文件夹中 db: restart: unless-stopped image: postgres:12.2-alpine container_name: misskey_db networks: - internal_network env_file: - ./config/docker.env # 需要使用配置文件中设置的 Docker 环境变量 volumes: - ./db:/var/lib/postgresql/data # 主数据库的数据文件夹映射，创建后默认在 ./db 文件夹中 networks: internal_network: # 内部网络 internal: true external_network: # 外部网 按 esc ，按 :wq ，回车（保存-退出）\n创建 config/default.yml 目录并进入 yml 文件中\n1 2 3 sudo mkdir config cd config sudo vim default.yml 填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # Misskey configuration #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # ┌─────┐ #───┘ URL └───────────────────────────────────────────────────── # Final accessible URL seen by a user. url: https://ponderduck.cc/ # 注意改成自己最后反向代理想要的网址 # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE # URL SETTINGS AFTER THAT! # ┌───────────────────────┐ #───┘ Port and TLS settings └─────────────────────────────────── # # Misskey requires a reverse proxy to support HTTPS connections. # # +----- https://example.tld/ ------------+ # +------+ |+-------------+ +----------------+| # | User | ---\u0026gt; || Proxy (443) | ---\u0026gt; | Misskey (3000) || # +------+ |+-------------+ +----------------+| # +---------------------------------------+ # # You need to set up a reverse proxy. (e.g. nginx) # An encrypted connection with HTTPS is highly recommended # because tokens may be transferred in GET requests. # The port that your Misskey server should listen on. port: 3001 # ┌──────────────────────────┐ #───┘ PostgreSQL configuration └──────────────────────────────── db: host: db port: 5432 # Database name db: misskey # Auth user: example-misskey-user pass: example-misskey-pass # Whether disable Caching queries #disableCache: true # Extra Connection options #extra: # ssl: true # ┌─────────────────────┐ #───┘ Redis configuration └───────────────────────────────────── redis: host: redis port: 6379 #family: 0 # 0=Both, 4=IPv4, 6=IPv6 #pass: example-pass #prefix: example-prefix #db: 1 # ┌─────────────────────────────┐ #───┘ Elasticsearch configuration └───────────────────────────── #elasticsearch: # host: localhost # port: 9200 # ssl: false # user: # pass: # ┌───────────────┐ #───┘ ID generation └─────────────────────────────────────────── # You can select the ID generation method. # You don\u0026#39;t usually need to change this setting, but you can # change it according to your preferences. # Available methods: # aid ... Short, Millisecond accuracy # meid ... Similar to ObjectID, Millisecond accuracy # ulid ... Millisecond accuracy # objectid ... This is left for backward compatibility # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE # ID SETTINGS AFTER THAT! id: \u0026#39;aid\u0026#39; # ┌─────────────────────┐ #───┘ Other configuration └───────────────────────────────────── # Whether disable HSTS #disableHsts: true # Number of worker processes #clusterLimit: 1 # Job concurrency per worker # deliverJobConcurrency: 128 # inboxJobConcurrency: 16 # Job rate limiter # deliverJobPerSec: 128 # inboxJobPerSec: 16 # Job attempts # deliverJobMaxAttempts: 12 # inboxJobMaxAttempts: 8 # IP address family used for outgoing request (ipv4, ipv6 or dual) #outgoingAddressFamily: ipv4 # Syslog option #syslog: # host: localhost # port: 514 # Proxy for HTTP/HTTPS #proxy: http://127.0.0.1:3128 #proxyBypassHosts: [ # \u0026#39;example.com\u0026#39;, # \u0026#39;192.0.2.8\u0026#39; #] # Proxy for SMTP/SMTPS #proxySmtp: http://127.0.0.1:3128 # use HTTP/1.1 CONNECT #proxySmtp: socks4://127.0.0.1:1080 # use SOCKS4 #proxySmtp: socks5://127.0.0.1:1080 # use SOCKS5 # Media Proxy #mediaProxy: https://example.com/proxy # Proxy remote files (default: false) #proxyRemoteFiles: true # Sign to ActivityPub GET request (default: false) #signToActivityPubGet: true #allowedPrivateNetworks: [ # \u0026#39;127.0.0.1/32\u0026#39; #] # Upload or download file size limits (bytes) #maxFileSize: 262144000 按 esc ，按 :wq ，回车（保存-退出）\n进入 env 文件\n1 sudo vim docker.env 填写如下内容\n1 2 3 4 # db settings POSTGRES_PASSWORD=example-misskey-pass POSTGRES_USER=example-misskey-user POSTGRES_DB=misskey 部署 还记得我说「创建并编辑 yml 文件，让它去部署」吗？\n现在文件已经配置完毕了，是时候让它跑起来了！\n双手合十🙏\n切换到上一级目录\n1 cd .. 屏住呼吸\n1 2 sudo docker-compose run --rm web yarn run init # 初始化数据库 sudo docker-compose up -d # 后台启动项目容器 跑了跑了，好了好了\n访问站点 查看端口状态\n1 sudo lsof -i:\u0026lt;port\u0026gt; 假如这个端口不能用，那就换一个。\n新端口要在服务商防火墙、ufw 命令、default.yml 和 docker-compose.yml 里都开启、改过来\n然后重启 Docker\n1 sudo docker-compose restart [指定服务的容器] 完成这一步之后，尝试用 IP 访问站点吧\n在浏览器输入 http://\u0026lt;ip\u0026gt;:\u0026lt;port\u0026gt;（IP 可以用 curl ip.sb 返回）\n成功了口牙！\n流出大河泪\nMisskey 要求 SSL 访问，另外站点还需要设置反向代理，这两件事让⬇️ NPM 一起干了\nNginxProxyManager（NPM） 是一个带前端管理界面的 Nginx 服务器，通过Let’s encrypt 来自动申请 SSL 证书并自动部署，反向代理你所需要的容器\n可以拿来实现二级域名分别访问指定端口的容器 + 一键部署 SSL\n创建并配置 docker-compose.yml 文件 创建并进入 yml 文件\n1 2 3 4 cd /home sudo mkdir myapp cd myapp sudo vim docker-compose.yml 把以下配置粘贴进去，保存退出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 version: \u0026#34;3\u0026#34; services: app: image: \u0026#39;jc21/nginx-proxy-manager:latest\u0026#39; restart: unless-stopped ports: # These ports are in format \u0026lt;host-port\u0026gt;:\u0026lt;container-port\u0026gt; - \u0026#39;80:80\u0026#39; # Public HTTP Port - \u0026#39;443:443\u0026#39; # Public HTTPS Port - \u0026#39;81:81\u0026#39; # Admin Web Port # Add any other Stream port you want to expose # - \u0026#39;21:21\u0026#39; # FTP environment: DB_MYSQL_HOST: \u0026#34;db\u0026#34; DB_MYSQL_PORT: 3306 DB_MYSQL_USER: \u0026#34;npm\u0026#34; DB_MYSQL_PASSWORD: \u0026#34;npm\u0026#34; DB_MYSQL_NAME: \u0026#34;npm\u0026#34; # Uncomment this if IPv6 is not enabled on your host # DISABLE_IPV6: \u0026#39;true\u0026#39; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt depends_on: - db db: image: \u0026#39;jc21/mariadb-aria:latest\u0026#39; restart: unless-stopped environment: MYSQL_ROOT_PASSWORD: \u0026#39;npm\u0026#39; MYSQL_DATABASE: \u0026#39;npm\u0026#39; MYSQL_USER: \u0026#39;npm\u0026#39; MYSQL_PASSWORD: \u0026#39;npm\u0026#39; volumes: - ./data/mysql:/var/lib/mysql 后台启动项目容器\n1 sudo docker-compose up -d 遇到报错：\n1 Error starting userland proxy: listen tcp 0.0.0.0:80: bind: address already in use 执行 netstat -pna | grep 80 （查询端口 80 是否开放/被占用），返回：\nListen 表示被占用，80 端口被 nginx 占用\n*netstat：控制台命令，用于监控 TCP/IP 网络\n*grep：查找文件内容\n🔪杀掉这个进程\n1 sudo kill 19306 再次部署，查看容器的运行情况\n1 docker container ls 🎆解决报错\n✅完成 yml 文件的配置\n申请 SSL 证书 去 CloudFlare\n设置反代 打开服务器的 81 端口\n1 sudo ufw allow 81/tcp 在浏览器输入 \u0026lt;ip\u0026gt;:81 ，用默认账号密码登录 NPM\n1 2 admin@example.com changeme 修改账号密码，NPM 初始化完成，开始配置\nForward Hostname / IP 填的是容器所在 Docker 网桥的虚拟 IP，通过命令查到\n1 sudo docker network inspect bridge 找到 IPAM - Config - Gateway 节点，后面的 IP 就是我们需要的\n*如果你在 docker-compose.yml 中自定义了网桥，那么自定义网桥名称替换掉上面的 bridge 参数\n1 2 3 4 5 6 7 8 9 10 11 [ { \u0026#34;IPAM\u0026#34;: { \u0026#34;Config\u0026#34;: [ { \u0026#34;Gateway\u0026#34;: \u0026#34;xxxx:xxxx:xxxx:xx::x\u0026#34; } ] }, } ] 设置管理员\n图片到37th\n其它参考 [User] Linux 新增使用者並賦予其使用 sudo 的權限\n保护好你的小鸡！保姆级服务器安全教程！\nmjj版的linux入门教程\nNginx Proxy Manager——小而美的多容器转发方案\n","date":"2022-11-19T20:19:15+08:00","image":"https://picsum.photos/800/600.webp?random=6ec56286","permalink":"https://anodicseal.xyz/2022/11/19/misskey/","title":"Misskey"},{"content":" 安装 PicGo 1 brew install picgo --cask 创建 GitHub 图床仓库 名称无所谓，记得勾选 README\n生成令牌（Token） 在 Account-Settings-Developer Settings-Personal Access Tokens 下生成（勾选 repo）并保存，我的Token：（隐藏）\n配置 PicGo 测试图床 设置成功后直接把图片粘贴进文档就OK\n相关参考 PicGo\n","date":"2022-10-21T23:29:38+08:00","image":"https://picsum.photos/800/600.webp?random=fa517d08","permalink":"https://anodicseal.xyz/2022/10/21/picture-bed/","title":"借助 PicGo 和 GitHub 实现插入图片"},{"content":"基于 macOS Monterey，Hugo 框架和 GitHub Pages 网页寄存服务，博客主题为 Stack，搭建过程尽量简单，同时减少后续隐患\n预警：非常啰嗦\n前期准备 安装 Hugo 1 2 3 4 5 6 7 # 安装 brew install hugo # 检查安装是否成功 hugo version # 返回⬇️ hugo v0.104.1+extended darwin/arm64 BuildDate=unknown 安装 Git 在 Git 下载、安装程序，按默认选项安装即可\n设置你的用户名和邮件地址\n1 2 3 # 填你的 GitHub ID 和注册邮箱 git config --global user.name \u0026#34;\u0026lt;username\u0026gt;\u0026#34; git config --global user.email user@example.com GitHub https://raw.githubusercontent.com/Falasool/blog-pic-bed/main/blog/new-public-repo-1.png\nhttps://raw.githubusercontent.com/Falasool/blog-pic-bed/main/blog/image-20221115113949496.png\n创建公开仓库 存放编译好的静态页面\n创建私密仓库 存放源码\n给两个仓库绑定 SSH key 生成 SSH key 1 ssh-keygen -t rsa -b 4096 -C \u0026#34;user@example.com\u0026#34; 这行命令 means：生成 SSH 密钥文件 - 密钥类型（rsa）- 密钥长度（4096） - 注释（user@example.com）\n在 .ssh 文件夹里找到生成的 SSH\n添加公钥：把 public key id_rsa_hugo_deploy.pub 添加到 .github.io 仓库: 1 2 cd .ssh cat id_rsa_hugo_deploy.pub # 显示文件内容 添加私钥：Private Key 添加到 private仓库： 这里 Secrets 变量名要一定是： ACTIONS_DEPLOY_KEY 绑定 Token 在 Account- Settings- Developer Settings- Personal access tokens-Tokens(classic) 里创建 Token，记得勾选 repo 和 workflow，并复制保存。我的 Token: （隐藏） 在私有仓库 hugo-scources-settings-secrets-Actions 创建名为PERSONAL_TOKEN，值为刚才的 Token 的Secret，这样就完成了 Token 的设置 搭建步骤 克隆 private 仓库到本地 新建 Hugo 站点 在本地 hugo-sources 文件夹中执行 ⬇️，在当前目录生成 Hugo 源码\n1 hugo new site . --force 找到 blog 文件夹，打开会发现结构如下\n1 2 3 4 5 6 7 8 9 blog ├── archetypes # 配置文件，决定创建新博文时的自带格式 │ └── default.md ├── config.toml # 网站配置文件 ├── content # 网站内容，全部是 markdown 格式 ├── data ├── layouts # 网站模板，优先于 themes/\u0026lt;THEME\u0026gt;/layouts ├── static # 静态资源（css/js/fonts/media等） └── themes Hugo 主题 有了主题，内容才会渲染出来\n在 github.com 搜索 hugo theme ，或在 Hugo Themes 选择你喜欢的主题。我选择 stack ，功能丰富，支持多种评论系统，使用人数多bug好解决\nfork 主题仓库，并使用 git submodule 方式添加到 themes 里，这样方便后续对主题的修改进行单独维护 1 2 3 # 在hugo-sources目录下 git init git submodule add https://github.com/Falasool/hugo-theme-stack themes/hugo-theme-stack 更新主题： 1 2 3 4 # 初始化 git submodule update --init --recursive # 同步主题仓库的最新修改 git submodule update --remote 删除根目录下的config.toml 文件，把 ./themes/hugo-theme-stack/exampleSite/ 里的 config.yaml 和 content 转移到根目录下，在 config.yaml 中进行站点细节配置 删掉 examplesite/content/post/rich-content/index.md，因为Twitter 等等被墙应用的API 中国大陆无法访问 Issus #191@CaiJimmy/hugo-theme-stack 本地预览 1 2 hugo server -D # 在浏览器打开localhost:1313 预览满意了 Control+C 终止预览 推送到 GitHub 1 2 3 git add . git commit -m \u0026#34;first commit\u0026#34; git push -u origin main GitHub Actions 配置 在 GitHub 的 Private 仓库页面，切换到 Actions tab，点击set up a workflow yourself，粘贴以下文件，并 commit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 name: Deploy Hugo Site to Github Pages on Main Branch on: push: branches: - main workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.104.1\u0026#39; # 查看你的版本把它替换掉，防止兼容问题 extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 external_repository: Falasool/Falasool.github.io # Pages 远程仓库 publish_dir: \u0026#34;./public\u0026#34; keep_files: false # remove existing files publish_branch: main # deploying branch commit_message: ${{ github.event.head_commit.message }} cname: anodicseal.xyz # 这里要改成你的个人域名，没有就把这行注释掉 在本地 hugo-sources 目录下执行 git pull origin main，查看本地文件夹，出现了 .github/workflows/main.yml 文件 检查流水线是否被正常触发（查看流水线日志） 博客搭建完成\n使用步骤 1 2 3 4 5 6 7 8 9 # 新建文章 hugo new post/\u0026lt;title\u0026gt;.md # 打开\u0026lt;title.md\u0026gt;，编辑并保存 # 本地预览 hugo server -D # 没问题了就push到远程仓库，Actions会自动部署 git add . git commit -m \u0026#34;test\u0026#34; git push origin main 拓展 Github Actions 实现的三种方案：\ngithub_token deploy_key personal_token 适用情况和差异请参考 官方文档\n相关参考 Hugo 搭建博客实践\nGit Submodule 命令与理解\nGithub Pages + Hugo 搭建个人博客\n自动发布系统\nGitHub Actions 入门教程\nWorkflow syntax for GitHub Actions\nCI/CD是什麼？一篇認識CI/CD工具及優勢，將日常瑣事自動化\nHugo + GitHub Action，搭建你的博客自动发布系统\nHugo 搭配 Github Actions 實現 Github Pages 的自動部署\n利用GitHub Action实现Hugo博客在GitHub Pages自动部署\nGitHubAction + Hugo 自动构建发布个人博客\n使用 Github Actions 自动发布 hugo 站点\n***\n折腾Hugo | GitHub Pages | Github Actions自动构建发布免费个人网站\n将Hugo静态网站部署到Github Pages\n用 Hugo 配合 GitHub Actions 和 GitHub Pages 搭建博客\n","date":"2022-10-21T21:28:27+08:00","image":"https://picsum.photos/800/600.webp?random=6e5ecc50","permalink":"https://anodicseal.xyz/2022/10/21/build-hugo-site-on-macos/","title":"Hugo｜Github Pages｜Stack主题｜搭建记录"},{"content":"什么是 Front Matter 是指 .md 文件最上面的这一部分内容\n1 2 3 4 5 6 --- title: xxxxxx date: 2022-10-10 09:39:50 type: tags layout: tags= --- 每次执行 hugo new 命令新建文章时，Hugo 会从 ./archetypes 中寻找对应的 Front Matter 模板并自动添加到新建文件的最上方\nFront Matter 里的参数定义了所在博文的外观、功能\n常用 Front Matter 设置 没有兴趣客制化可以复制以下代码，添加进 ./archetypes/default.md 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 --- # 使用时需删除注释和空行 # 创建和文件名相同的文章标题 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: \u0026#34;\u0026#34; # 优化 URL slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; author: [\u0026#34;Rubberduck\u0026#34;] type: post/draft/page date: {{ .Date }} draft: false # 随机匹配一张图片 image: https://picsum.photos/800/600.webp?random={{ substr (md5 (.Date)) 4 8 }} categories: [\u0026#34;Tutorials\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;,\u0026#34;tech\u0026#34;] keywords: [\u0026#34;tutorials\u0026#34;, \u0026#34;Hugo\u0026#34;, \u0026#34;mac\u0026#34;,\u0026#34;tech\u0026#34;] metaAlignment: center coverMeta: in/out coverSize: partial coverCaption: \u0026#34;文章cover图片描述\u0026#34; isCJKLanguage: true --- 下面具体说明各项参数，\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 type 文章类别，可选post/page/draft等等 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考官方文档 Hugo｜Front Matter\n相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\n貼身打造個人部落格 - 02. 文章 Front Matter\nHugo之路 2 | hugo-theme-stack 配置 —— 参考了匹配随机图片的代码\n","date":"2022-10-12T20:08:18+08:00","image":"https://picsum.photos/800/600.webp?random=5fe4fd89","permalink":"https://anodicseal.xyz/2022/10/12/hugo-front-matter/","title":"Hugo | Front Matter"},{"content":"前期准备 安装 Hugo 打开 Github 中的 Hugo 库，下载最新的版本，本次下载：hugo_extended_0.99.1_Windows-64bit.zip 因为一些主题需要进行 SCSS/SASS 构建，所以推荐下载 extended 版本，普通版本可能会报错：you need the extended version to build SCSS/SASS 配置环境变量 在 控制面板 -\u0026gt; 系统 -\u0026gt; 高级系统设置 -\u0026gt; 高级 中找到环境变量 在用户变量中找到 Path 变量，点击编辑，在弹出的窗口中选择新建，输入 Hugo.exe 文件的文件夹路径（不要包括 Hugo.exe 本身） 测试配置是否成功：在 E:\\ 空白处右键，点击 Git Bash Here ，在命令行中输入 hugo version ，若返回 Hugo 版本号信息，说明配置成功 安装 Git 在 Git 下载、安装程序，按默认选项安装即可\n设置 在开始菜单找到 Git Bash ，打开输入：\n1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; 配置 SSH SSH 密钥用来链接本地和 Git 服务器，它成对生成，分别是” 公钥 “和” 私钥 “，我们将其中的” 公钥 “保存到 Git 仓库后，就可以在电脑上向这个 Git 仓库提交代码。\n生成 SSH 在 Git Bash Here 里输入：\n1 ssh-keygen -t rsa -C\u0026#34;注册 github 账号时使用的邮箱\u0026#34; 按照系统提示指定密钥位置、是否需要密码，懒得设置可以直接回车，显示如下结果说明 SSH 生成成功：\n1 2 Your identification has veen saved in id_rsa Your public key has been saved in id_rsa.pub 连接 SSH 在 C:/Users/用户名/.ssh/ 路径找到公钥 id_rsa.pub ，右键用记事本打开，复制全部内容到 Github 账号 -\u0026gt; Settings -\u0026gt; SSH and GPG keys ，新建一个 SSH 密钥，把公钥粘贴保存 测试 SSH 连接是否完成，在 Git Bash Here 输入：\n1 ssh -T git@github.com 如果返回：\n1 Hi username!YOu\u0026#39;ve successfully authenticated,but GitHub does not provide shell access. 说明 SSH 连接成功\n创建 Github 仓库 注意仓库名要和 GitHub 用户名一致，比如你是 xiaohong，那么你要输入 xiaohong.github.io ，最终仓库的完整名是 xiaohong/xiaohong.github.io\n安装 VSCode Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器\n在 官方下载地址 选择相应的版本下载，按照默认选项安装，安装汉化插件 Chinese (Simplified) Language Pack for Visual Studio Code\n安装 Typora（可选） Typora 是一款轻型 MarkDown 编辑器，其实 VSCode 安装 md 插件后也能胜任它的工作，但是我们就让专业的 Typora 做专业的事吧\n在官网 releases 页面购买，或点击 Dev/Beta Released -\u0026gt; 下拉到底端 old macOS beta/old Windows/Linux beta 下载 beta 版\n⚠️ 建议在偏好设置里，设置插入图片时复制到指定路径（./xx/），这样复制的图片就会自动保存在当前文件夹下的xx文件夹里，方便后续管理与转移。\n开始建站 新建 Hugo 网站 新建一个文件夹用来存放 Hugo 网站的文件，例如：H:/HugoWebsite 在 HugoWebsite 文件夹内空白处点击右键，选择 Git Bush Here ，执行以下命令，新建一个 Hugo 网站 1 hugo new site blog # blog是网站文件夹名 选择 Hugo 主题 在 github.com 搜索 hugo theme ，或在 Hugo Themes 选择你喜欢的主题。此处以 cactus 举例\n⚠️ 推荐将主题仓库 fork 到自己的账号，使用 git submodule 方式进行仓库连接，这样方便后续对主题的修改进行单独维护（否则\n1 2 3 cd blog git init git submodule add https://github.com/monkeyWzr/hugo-theme-cactus themes/hugo-theme-cactus ⚠️ git clone 命令也可以，就是修改可能会和原主题冲突，不方便版本管理和后续更新，在文件夹 blog 空白处右键点击 Git Bush Here\n1 2 3 4 5 # 进入 themes 目录，如果没有这个文件夹用 mkdir -p themes 自行创建 cd themes # 下载主题到 cactus 文件夹下 git clone git@github.com:monkeyWzr/hugo-theme-cactus.git 配置主题 备份 blog 文件夹里的 config.toml 文件，用 blog/themes/hugo-theme-cactus/exampleSite/ 下的 config.toml 覆盖 blog 文件夹下的 config.toml ，然后打开 config.toml 修改配置\n必要的修改 1 2 3 4 5 # 修改 URL 为你的 GitHub 仓库名称 baseURL = \u0026#34;https://username.github.io\u0026#34; # 这里必须和 themes 文件夹里的主题文件夹名称一致，所以把主题文件名从 hugo-theme-cactus 修改为 cactus theme = \u0026#34;cactus\u0026#34; 本地预览 新建文章 在网站文件根目录：E:\\HugoWebsite\\blog 下执行：\n1 hugo new post/first_article.md 到 blog/content/post 里打开并编辑文章内容，保存\n启动 Hugo server 1 hugo server -D 打开网址 http://localhost:1313/ 进行预览，在 config.toml 里调整页面效果\n部署到 GitHub 进入 E:\\HugoWebsite\\blog\\public 目录，初始化 Git 库\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 进入 public 文件夹 cd public # 初始化 git init # 将 git 本地库关联至远程库 git remote add origin git@github.com:username/username.github.io.git # 提交修改 git commit -m \u0026#34;firstarticle\u0026#34; # 查看当前修改状态 git status # 添加所有修改过的文件 git add . # 提交到本地库，\u0026#34;add first-post\u0026#34;是本次提交内容的说明信息 git commit -m\u0026#34;add first-post\u0026#34; # 提交到远程库 git push origin main ✨ 曾经 github 的默认分支是 master，时间比较久的教程「提交到远程库」这一步都是git push origin master ，这里要注意\n日常使用博客要知道的 Front Matter 什么是 Front Matter 是指 .md 文件最上面的这一部分内容\ntitle: tags\ndate: 2019-08-13 09:39:50\ntype: tags\nlayout: tag\nFront Matter 内容 参数 描述 title 标题，默认与文件名一致 date 默认为文件创建日期 slug 指定文章网址 update 文件更新日期 lastmod 文章最后更新日期 description 文章描述，会被抓去做SEO放在HTML的header中 categories 分类（不适用于分页） tags 标签（不适用于分页） hidden 是否隐藏文章，值为 true 时输入正确网址就可以查看 draft 是否为草稿，值为 true 时 Hugo 不编译这个文件 layout 指定文章使用的模板，不指定的话会使用 根目录/_config.toml 中的默认配置 default_layout:post comments 开启文章评论功能，默认为 true permalink 覆盖文章网址 coverImage 设置文章封面图片 metaAlignment 设置文章title的位置 coverMeta 文章title放在封面图片中央还是外面 coverSize 封面图片大小 如果需要添加 Hugo 创建的 .md 文件自带的 Front Matter 模板没有的参数，可以编辑 archetypes 文件夹下的 default.md 文件\n更多请参考Hugo｜Front Matter\n如何新建或修改博文 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 在根目录：E:/HugoWebsite/blog 下新建文章或编辑文章 hugo new post/title.md # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public cd public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 如何删除文章 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 在目录 E:/HugoWebsite/blog/content/post 和 E:/HugoWebsite/blog/public 找到对应文章删除 # 其中public下文件不删除不会影响显示，只是文件就会一直存在，除.git删错了也不要紧，hugo命令会重建 # 本地预览，http://localhost:1313/ hugo server -D # 构建 Hugo 网站 hugo # 切换到目录：E:/HugoWebsite/blog/public # 提交修改到本地库 git add . git commit -m\u0026#34;commit info\u0026#34; # 把内容拉下来以rebase方式合并 git pull --rebase # 将修改推到远程库 git push -u origin main 装修没有止境 评论系统用 cactus，原装！可爱！\n（202210:换了主题所以不再补充了）\n报错和解决方法 相关参考 感谢前人的耕耘和分享，希望本文也能给你带来一些帮助 ❤️\nGithub Pages + Hugo 搭建个人博客\nHugo | 一起动手搭建个人博客吧\n记录一下如何用 Hugo 和 Github Page 建立简单的博客 Blog\nHugo 从入门到会用\n小白如何低成本建立个人网站或作品集（详细教程）\n使用 Hugo 和 GitHub 搭建博客\n***\nfront-matter 使用详解\nhugo 建站全指南 | 我的第一个博客网站\n在静态网站上包含评论的各种方法\n***\n為你自己學Git｜怎麼有時候推不上去\nGit 把本地仓库与 GitHub 远程仓库关联进行同步\n将 Git 默认分支从 master 修改为 main\n","date":"2022-10-12T16:06:44+08:00","image":"https://picsum.photos/800/600.webp?random=1912f23e","permalink":"https://anodicseal.xyz/2022/10/12/build-blog-site-use-hugo-win/","title":"Hugo | Github Pages ｜ cactus主题 | win10搭建记录"}]